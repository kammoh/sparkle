// Generated by Bluespec Compiler, version untagged-gfcc9951f (build fcc9951f) 
// Method conflict info: 
// Method: pdi_data 
// Conflict-free: pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Conflicts: pdi_data 
// Method: pdi_valid 
// Conflict-free: pdi_data, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Conflicts: pdi_valid 
// Method: pdi_ready 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Method: sdi_data 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Conflicts: sdi_data 
// Method: sdi_valid 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Conflicts: sdi_valid 
// Method: sdi_ready 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Method: do__data 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Method: do__last 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Method: do__valid 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid, 
// 	       do__ready 
// Method: do__ready 
// Conflict-free: pdi_data, 
// 	       pdi_valid, 
// 	       pdi_ready, 
// 	       sdi_data, 
// 	       sdi_valid, 
// 	       sdi_ready, 
// 	       do__data, 
// 	       do__last, 
// 	       do__valid 
// Conflicts: do__ready 
// Ports: 
// Name                         I/O  size props 
// pdi_ready                      O     1 
// sdi_ready                      O     1 
// do_data                        O    32 reg 
// do_last                        O     1 reg 
// do_valid                       O     1 
// clk                            I     1 clock 
// rst                            I     1 reset 
// pdi_data                       I    32 reg 
// pdi_valid                      I     1 
// sdi_data                       I    32 reg 
// sdi_valid                      I     1 
// do_ready                       I     1 
// No combinational paths from inputs to outputs 
// LWC top module 
module lwc(clk,
	   rst,
	   pdi_data,
	   pdi_valid,
	   pdi_ready,
	   sdi_data,
	   sdi_valid,
	   sdi_ready,
	   do_data,
	   do_last,
	   do_valid,
	   do_ready);
  input  clk;
  input  rst;
  // action method pdi_data 
  input  [31 : 0] pdi_data;
  // action method pdi_valid 
  input  pdi_valid;
  // value method pdi_ready 
  output pdi_ready;
  // action method sdi_data 
  input  [31 : 0] sdi_data;
  // action method sdi_valid 
  input  sdi_valid;
  // value method sdi_ready 
  output sdi_ready;
  // value method do__data 
  output [31 : 0] do_data;
  // value method do__last 
  output do_last;
  // value method do__valid 
  output do_valid;
  // action method do__ready 
  input  do_ready;
  // signals for module outputs 
  wire [31 : 0] do_data;
  wire do_last, do_valid, pdi_ready, sdi_ready;
  // inlined wires 
  reg [36 : 0] cc_sipo_enq_wire_wget;
  wire [287 : 0] cc_piso_enq_wire_wget;
  wire [32 : 0] lwc_headersFifo_rv_port1__read,
		lwc_headersFifo_rv_port1__write_1,
		lwc_headersFifo_rv_port2__read,
		lwc_tagFifo_rv_port1__read,
		lwc_tagFifo_rv_port1__write_1,
		lwc_tagFifo_rv_port2__read;
  wire cc_piso_do_deq_whas,
       cc_piso_enq_wire_whas,
       cc_sipo_enq_wire_whas,
       lwc_doSender_fifof_dequeueing_whas,
       lwc_doSender_fifof_enqueueing_whas,
       lwc_doSender_fifof_x_wire_whas,
       lwc_headersFifo_rv_EN_port1__write,
       lwc_pdiReceiver_deq_pw_whas,
       lwc_sdiReceiver_deq_pw_whas;
  // register cc_eoi 
  reg cc_eoi;
  wire cc_eoi_D_IN, cc_eoi_EN;
  // register cc_inState 
  reg [1 : 0] cc_inState;
  reg [1 : 0] cc_inState_D_IN;
  wire cc_inState_EN;
  // register cc_inbufFlags 
  reg [7 : 0] cc_inbufFlags;
  wire [7 : 0] cc_inbufFlags_D_IN;
  wire cc_inbufFlags_EN;
  // register cc_incomplete 
  reg cc_incomplete;
  wire cc_incomplete_D_IN, cc_incomplete_EN;
  // register cc_keyBuf 
  reg [127 : 0] cc_keyBuf;
  wire [127 : 0] cc_keyBuf_D_IN;
  wire cc_keyBuf_EN;
  // register cc_opState 
  reg [1 : 0] cc_opState;
  reg [1 : 0] cc_opState_D_IN;
  wire cc_opState_EN;
  // register cc_piso_blockVec 
  reg [255 : 0] cc_piso_blockVec;
  wire [255 : 0] cc_piso_blockVec_D_IN;
  wire cc_piso_blockVec_EN;
  // register cc_piso_validsVec 
  reg [31 : 0] cc_piso_validsVec;
  wire [31 : 0] cc_piso_validsVec_D_IN;
  wire cc_piso_validsVec_EN;
  // register cc_sipo_block 
  reg [255 : 0] cc_sipo_block;
  wire [255 : 0] cc_sipo_block_D_IN;
  wire cc_sipo_block_EN;
  // register cc_sipo_lastBlock 
  reg cc_sipo_lastBlock;
  wire cc_sipo_lastBlock_D_IN, cc_sipo_lastBlock_EN;
  // register cc_sipo_validBytes 
  reg [31 : 0] cc_sipo_validBytes;
  wire [31 : 0] cc_sipo_validBytes_D_IN;
  wire cc_sipo_validBytes_EN;
  // register cc_sipo_zFill 
  reg cc_sipo_zFill;
  wire cc_sipo_zFill_D_IN, cc_sipo_zFill_EN;
  // register cc_slimPerm 
  reg cc_slimPerm;
  wire cc_slimPerm_D_IN, cc_slimPerm_EN;
  // register cc_sparkleState 
  reg [383 : 0] cc_sparkleState;
  wire [383 : 0] cc_sparkleState_D_IN;
  wire cc_sparkleState_EN;
  // register cc_step 
  reg [3 : 0] cc_step;
  wire [3 : 0] cc_step_D_IN;
  wire cc_step_EN;
  // register lwc_doSender_fifof_cntr_r 
  reg [1 : 0] lwc_doSender_fifof_cntr_r;
  wire [1 : 0] lwc_doSender_fifof_cntr_r_D_IN;
  wire lwc_doSender_fifof_cntr_r_EN;
  // register lwc_doSender_fifof_q_0 
  reg [32 : 0] lwc_doSender_fifof_q_0;
  reg [32 : 0] lwc_doSender_fifof_q_0_D_IN;
  wire lwc_doSender_fifof_q_0_EN;
  // register lwc_doSender_fifof_q_1 
  reg [32 : 0] lwc_doSender_fifof_q_1;
  reg [32 : 0] lwc_doSender_fifof_q_1_D_IN;
  wire lwc_doSender_fifof_q_1_EN;
  // register lwc_finalRemainBytes 
  reg [1 : 0] lwc_finalRemainBytes;
  wire [1 : 0] lwc_finalRemainBytes_D_IN;
  wire lwc_finalRemainBytes_EN;
  // register lwc_headersFifo_rv 
  reg [32 : 0] lwc_headersFifo_rv;
  wire [32 : 0] lwc_headersFifo_rv_D_IN;
  wire lwc_headersFifo_rv_EN;
  // register lwc_inSegEoT 
  reg lwc_inSegEoT;
  wire lwc_inSegEoT_D_IN, lwc_inSegEoT_EN;
  // register lwc_inSegFlags 
  reg [7 : 0] lwc_inSegFlags;
  wire [7 : 0] lwc_inSegFlags_D_IN;
  wire lwc_inSegFlags_EN;
  // register lwc_inSegLast 
  reg lwc_inSegLast;
  wire lwc_inSegLast_D_IN, lwc_inSegLast_EN;
  // register lwc_newKey 
  reg lwc_newKey;
  wire lwc_newKey_D_IN, lwc_newKey_EN;
  // register lwc_outCounter 
  reg [13 : 0] lwc_outCounter;
  reg [13 : 0] lwc_outCounter_D_IN;
  wire lwc_outCounter_EN;
  // register lwc_outRemainder 
  reg [1 : 0] lwc_outRemainder;
  wire [1 : 0] lwc_outRemainder_D_IN;
  wire lwc_outRemainder_EN;
  // register lwc_outSegLast 
  reg lwc_outSegLast;
  wire lwc_outSegLast_D_IN, lwc_outSegLast_EN;
  // register lwc_outSegPt 
  reg lwc_outSegPt;
  wire lwc_outSegPt_D_IN, lwc_outSegPt_EN;
  // register lwc_outState 
  reg [1 : 0] lwc_outState;
  reg [1 : 0] lwc_outState_D_IN;
  wire lwc_outState_EN;
  // register lwc_pdiCounter 
  reg [13 : 0] lwc_pdiCounter;
  wire [13 : 0] lwc_pdiCounter_D_IN;
  wire lwc_pdiCounter_EN;
  // register lwc_pdiState 
  reg [2 : 0] lwc_pdiState;
  reg [2 : 0] lwc_pdiState_D_IN;
  wire lwc_pdiState_EN;
  // register lwc_sdiCounter 
  reg [31 : 0] lwc_sdiCounter;
  wire [31 : 0] lwc_sdiCounter_D_IN;
  wire lwc_sdiCounter_EN;
  // register lwc_sdiState 
  reg [1 : 0] lwc_sdiState;
  reg [1 : 0] lwc_sdiState_D_IN;
  wire lwc_sdiState_EN;
  // register lwc_statFailure 
  reg lwc_statFailure;
  wire lwc_statFailure_D_IN, lwc_statFailure_EN;
  // register lwc_tagFifo_rv 
  reg [32 : 0] lwc_tagFifo_rv;
  wire [32 : 0] lwc_tagFifo_rv_D_IN;
  wire lwc_tagFifo_rv_EN;
  // ports of submodule lwc_pdiReceiver_fifof 
  wire [31 : 0] lwc_pdiReceiver_fifof_D_IN, lwc_pdiReceiver_fifof_D_OUT;
  wire lwc_pdiReceiver_fifof_CLR,
       lwc_pdiReceiver_fifof_DEQ,
       lwc_pdiReceiver_fifof_EMPTY_N,
       lwc_pdiReceiver_fifof_ENQ,
       lwc_pdiReceiver_fifof_FULL_N;
  // ports of submodule lwc_sdiReceiver_fifof 
  wire [31 : 0] lwc_sdiReceiver_fifof_D_IN, lwc_sdiReceiver_fifof_D_OUT;
  wire lwc_sdiReceiver_fifof_CLR,
       lwc_sdiReceiver_fifof_DEQ,
       lwc_sdiReceiver_fifof_EMPTY_N,
       lwc_sdiReceiver_fifof_ENQ,
       lwc_sdiReceiver_fifof_FULL_N;
  // rule scheduling signals 
  wire WILL_FIRE_RL_cc_absorb_inbuf,
       WILL_FIRE_RL_cc_pad_after_full_word,
       WILL_FIRE_RL_cc_sipo_enq_deq,
       WILL_FIRE_RL_cc_sipo_zero_fill,
       WILL_FIRE_RL_cc_squeeze_tag,
       WILL_FIRE_RL_lwc_doSender_fifof_both,
       WILL_FIRE_RL_lwc_doSender_fifof_decCtr,
       WILL_FIRE_RL_lwc_doSender_fifof_incCtr,
       WILL_FIRE_RL_lwc_enq_tag,
       WILL_FIRE_RL_lwc_feed_core_pdi,
       WILL_FIRE_RL_lwc_get_key_data,
       WILL_FIRE_RL_lwc_get_pdi_hdr,
       WILL_FIRE_RL_lwc_get_sdi_hdr,
       WILL_FIRE_RL_lwc_get_sdi_inst,
       WILL_FIRE_RL_lwc_get_tag_data,
       WILL_FIRE_RL_lwc_get_tag_hdr,
       WILL_FIRE_RL_lwc_out_header,
       WILL_FIRE_RL_lwc_out_status,
       WILL_FIRE_RL_lwc_pdi_instruction,
       WILL_FIRE_RL_lwc_sendout_data,
       WILL_FIRE_RL_lwc_verify_tag;
  // inputs to muxes for submodule ports 
  reg [32 : 0] MUX_lwc_doSender_fifof_q_0_write_1__VAL_1;
  wire [383 : 0] MUX_cc_sparkleState_write_1__VAL_1,
		 MUX_cc_sparkleState_write_1__VAL_2;
  wire [287 : 0] MUX_cc_piso_enq_wire_wset_1__VAL_1,
		 MUX_cc_piso_enq_wire_wset_1__VAL_2;
  wire [36 : 0] MUX_cc_sipo_enq_wire_wset_1__VAL_1;
  wire [32 : 0] MUX_lwc_doSender_fifof_q_0_write_1__VAL_2,
		MUX_lwc_doSender_fifof_q_1_write_1__VAL_2,
		MUX_lwc_doSender_fifof_q_1_write_1__VAL_3,
		MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_1,
		MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_2,
		MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_3,
		MUX_lwc_headersFifo_rv_port1__write_1__VAL_1;
  wire [31 : 0] MUX_lwc_sdiCounter_write_1__VAL_1;
  wire [13 : 0] MUX_lwc_outCounter_write_1__VAL_1,
		MUX_lwc_outCounter_write_1__VAL_2,
		MUX_lwc_pdiCounter_write_1__VAL_1;
  wire [7 : 0] MUX_cc_inbufFlags_write_1__VAL_1;
  wire [3 : 0] MUX_cc_step_write_1__VAL_1;
  wire [2 : 0] MUX_lwc_pdiState_write_1__VAL_3,
	       MUX_lwc_pdiState_write_1__VAL_4;
  wire [1 : 0] MUX_cc_inState_write_1__VAL_3,
	       MUX_cc_inState_write_1__VAL_4,
	       MUX_cc_opState_write_1__VAL_1,
	       MUX_lwc_doSender_fifof_cntr_r_write_1__VAL_2,
	       MUX_lwc_outState_write_1__VAL_2,
	       MUX_lwc_outState_write_1__VAL_3;
  wire MUX_cc_inState_write_1__SEL_1,
       MUX_cc_inState_write_1__SEL_2,
       MUX_cc_inState_write_1__SEL_3,
       MUX_cc_inbufFlags_write_1__SEL_1,
       MUX_cc_opState_write_1__SEL_1,
       MUX_cc_opState_write_1__SEL_2,
       MUX_cc_opState_write_1__SEL_3,
       MUX_cc_piso_enq_wire_wset_1__SEL_1,
       MUX_cc_sipo_enq_wire_wset_1__SEL_1,
       MUX_lwc_doSender_fifof_q_0_write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_0_write_1__SEL_2,
       MUX_lwc_doSender_fifof_q_1_write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_1_write_1__SEL_2,
       MUX_lwc_headersFifo_rv_port1__write_1__SEL_1,
       MUX_lwc_outCounter_write_1__SEL_1,
       MUX_lwc_outCounter_write_1__SEL_2,
       MUX_lwc_outState_write_1__SEL_1,
       MUX_lwc_outState_write_1__SEL_2,
       MUX_lwc_outState_write_1__SEL_3,
       MUX_lwc_pdiCounter_write_1__SEL_1,
       MUX_lwc_pdiState_write_1__SEL_1,
       MUX_lwc_pdiState_write_1__SEL_3,
       MUX_lwc_pdiState_write_1__SEL_4,
       MUX_lwc_sdiState_write_1__SEL_1,
       MUX_lwc_statFailure_write_1__SEL_1;
  // remaining internal signals 
  reg [31 : 0] y__h30779;
  reg [3 : 0] CASE_lwc_finalRemainBytes_0_0b1111_1_0b1_2_0b1_ETC__q1;
  wire [383 : 0] IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d360;
  wire [319 : 0] IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d299,
		 cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d1208;
  wire [255 : 0] IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d234,
		 cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d1047;
  wire [191 : 0] IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d163;
  wire [31 : 0] IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d90,
		cc_sipo_block_4_BITS_127_TO_96_38_XOR_cc_spark_ETC___d239,
		cc_sipo_block_4_BITS_159_TO_128_03_XOR_cc_spar_ETC___d205,
		cc_sipo_block_4_BITS_191_TO_160_68_XOR_cc_spar_ETC___d170,
		cc_sipo_block_4_BITS_223_TO_192_32_XOR_cc_spar_ETC___d134,
		cc_sipo_block_4_BITS_255_TO_224_8_XOR_cc_spark_ETC___d100,
		cc_sipo_block_4_BITS_31_TO_0_33_XOR_cc_sparkle_ETC___d334,
		cc_sipo_block_4_BITS_63_TO_32_03_XOR_cc_sparkl_ETC___d304,
		cc_sipo_block_4_BITS_95_TO_64_70_XOR_cc_sparkl_ETC___d271,
		cc_sparkleState_8_BITS_127_TO_100_62_CONCAT_cc_ETC___d679,
		cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d519,
		lwc_headersFifo_rv_BITS_31_TO_0__q2,
		sw__h46250,
		t__h15563,
		t__h15579,
		t__h15595,
		t__h15611,
		tmpx__h29016,
		tmpx__h29018,
		tmpy__h29017,
		tmpy__h29019,
		wi__h15560,
		wi__h15576,
		wi__h15592,
		wi__h15608,
		wj__h15561,
		wj__h15577,
		wj__h15593,
		wj__h15609,
		x0__h29012,
		x__h16381,
		x__h18050,
		x__h19350,
		x__h20650,
		x__h21963,
		x__h23220,
		x__h24477,
		x__h25734,
		x__h29686,
		x__h29713,
		x__h29738,
		x__h29803,
		x__h29848,
		x__h29988,
		x__h30023,
		x__h30183,
		x__h30210,
		x__h30235,
		x__h30379,
		x__h30425,
		x__h30472,
		x__h30507,
		x__h30664,
		x__h30691,
		x__h30716,
		x__h30859,
		x__h30904,
		x__h30948,
		x__h30983,
		x__h31120,
		x__h31121,
		x__h31151,
		x__h31178,
		x__h31203,
		x__h31268,
		x__h31313,
		x__h31357,
		x__h31392,
		x__h31494,
		x__h31609,
		x__h31610,
		x__h31645,
		x__h31762,
		x__h31763,
		x__h31798,
		x__h31825,
		x__h31850,
		x__h31915,
		x__h31960,
		x__h32004,
		x__h32039,
		x__h32134,
		x__h32135,
		x__h32217,
		x__h32218,
		x__h32253,
		x__h32280,
		x__h32305,
		x__h32370,
		x__h32415,
		x__h32459,
		x__h32494,
		x__h32589,
		x__h32590,
		x__h42606,
		y0__h29013,
		y__h29687,
		y__h29703,
		y__h29714,
		y__h29730,
		y__h29739,
		y__h29755,
		y__h29782,
		y__h29823,
		y__h29868,
		y__h30043,
		y__h30184,
		y__h30200,
		y__h30211,
		y__h30227,
		y__h30236,
		y__h30252,
		y__h30263,
		y__h30279,
		y__h30399,
		y__h30445,
		y__h30527,
		y__h30665,
		y__h30681,
		y__h30692,
		y__h30708,
		y__h30717,
		y__h30733,
		y__h30744,
		y__h30760,
		y__h30879,
		y__h30924,
		y__h31003,
		y__h31152,
		y__h31168,
		y__h31179,
		y__h31195,
		y__h31204,
		y__h31220,
		y__h31247,
		y__h31288,
		y__h31333,
		y__h31412,
		y__h31799,
		y__h31815,
		y__h31826,
		y__h31842,
		y__h31851,
		y__h31867,
		y__h31894,
		y__h31935,
		y__h31980,
		y__h32059,
		y__h32254,
		y__h32270,
		y__h32281,
		y__h32297,
		y__h32306,
		y__h32322,
		y__h32349,
		y__h32390,
		y__h32435,
		y__h32514,
		z__h15562,
		z__h15578,
		z__h15594,
		z__h15610;
  wire [30 : 0] s_snd__h30419;
  wire [13 : 0] x__h48946;
  wire [7 : 0] IF_NOT_cc_sipo_validBytes_BIT_0_9_0_AND_cc_inb_ETC___d354,
	       IF_NOT_cc_sipo_validBytes_BIT_4_0_AND_cc_inbuf_ETC___d324,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d103,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d109,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d116,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d122,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d137,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d143,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d150,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d156,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d173,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d179,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d186,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d192,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d208,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d214,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d221,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d227,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d242,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d248,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d255,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d261,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d274,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d280,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d287,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d293,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d307,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d313,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d320,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d337,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d343,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d350;
  wire [3 : 0] IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578,
	       spliced_bits__h30300;
  wire [2 : 0] IF_lwc_inSegEoT_556_AND_lwc_inSegFlags_550_BIT_ETC___d1630,
	       const_x__h15623,
	       spliced_bits__h16011;
  wire [1 : 0] lwc_doSender_fifof_cntr_r_421_MINUS_1___d1430;
  wire NOT_IF_lwc_tagFifo_rv_port0__read__670_BIT_32__ETC___d1692,
       NOT_lwc_outCounter_674_BITS_13_TO_1_693_EQ_0_6_ETC___d1709,
       _dfoo1,
       _dfoo3,
       lwc_inSegFlags_550_BIT_1_551_AND_lwc_inSegFlag_ETC___d1594,
       lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_555_A_ETC___d1591;
  // value method pdi_ready 
  assign pdi_ready =
	     lwc_pdiReceiver_fifof_FULL_N || lwc_pdiReceiver_deq_pw_whas ;
  // value method sdi_ready 
  assign sdi_ready =
	     lwc_sdiReceiver_fifof_FULL_N || lwc_sdiReceiver_deq_pw_whas ;
  // value method do__data 
  assign do_data = lwc_doSender_fifof_q_0[31:0] ;
  // value method do__last 
  assign do_last = lwc_doSender_fifof_q_0[32] ;
  // value method do__valid 
  assign do_valid = lwc_doSender_fifof_cntr_r != 2'd0 ;
  // submodule lwc_pdiReceiver_fifof 
  FIFOL1 #(.width(32'd32)) lwc_pdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_pdiReceiver_fifof_D_IN),
						 .ENQ(lwc_pdiReceiver_fifof_ENQ),
						 .DEQ(lwc_pdiReceiver_fifof_DEQ),
						 .CLR(lwc_pdiReceiver_fifof_CLR),
						 .D_OUT(lwc_pdiReceiver_fifof_D_OUT),
						 .FULL_N(lwc_pdiReceiver_fifof_FULL_N),
						 .EMPTY_N(lwc_pdiReceiver_fifof_EMPTY_N));
  // submodule lwc_sdiReceiver_fifof 
  FIFOL1 #(.width(32'd32)) lwc_sdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_sdiReceiver_fifof_D_IN),
						 .ENQ(lwc_sdiReceiver_fifof_ENQ),
						 .DEQ(lwc_sdiReceiver_fifof_DEQ),
						 .CLR(lwc_sdiReceiver_fifof_CLR),
						 .D_OUT(lwc_sdiReceiver_fifof_D_OUT),
						 .FULL_N(lwc_sdiReceiver_fifof_FULL_N),
						 .EMPTY_N(lwc_sdiReceiver_fifof_EMPTY_N));
  // rule RL_cc_sipo_zero_fill 
  assign WILL_FIRE_RL_cc_sipo_zero_fill =
	     cc_sipo_zFill && !cc_sipo_validBytes[0] ;
  // rule RL_lwc_get_sdi_inst 
  assign WILL_FIRE_RL_lwc_get_sdi_inst =
	     lwc_pdiState != 3'd0 && lwc_sdiState == 2'd1 &&
	     lwc_sdiReceiver_fifof_EMPTY_N ;
  // rule RL_lwc_get_sdi_hdr 
  assign WILL_FIRE_RL_lwc_get_sdi_hdr =
	     lwc_pdiState != 3'd0 && lwc_sdiState == 2'd2 &&
	     lwc_sdiReceiver_fifof_EMPTY_N ;
  // rule RL_lwc_get_key_data 
  assign WILL_FIRE_RL_lwc_get_key_data =
	     cc_inState != 2'd0 && cc_opState == 2'd0 &&
	     lwc_pdiState != 3'd0 &&
	     lwc_sdiState == 2'd3 &&
	     lwc_sdiReceiver_fifof_EMPTY_N ;
  // rule RL_lwc_pdi_instruction 
  assign WILL_FIRE_RL_lwc_pdi_instruction =
	     cc_inState == 2'd0 && cc_opState == 2'd0 &&
	     lwc_pdiState == 3'd0 &&
	     lwc_pdiReceiver_fifof_EMPTY_N ;
  // rule RL_lwc_get_tag_hdr 
  assign WILL_FIRE_RL_lwc_get_tag_hdr =
	     lwc_pdiState == 3'd3 && lwc_pdiReceiver_fifof_EMPTY_N ;
  // rule RL_lwc_out_header 
  assign WILL_FIRE_RL_lwc_out_header =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd0 &&
	     lwc_headersFifo_rv[32] ;
  // rule RL_lwc_enq_tag 
  assign WILL_FIRE_RL_lwc_enq_tag =
	     lwc_pdiState == 3'd5 && !lwc_headersFifo_rv_port1__read[32] ;
  // rule RL_lwc_verify_tag 
  assign WILL_FIRE_RL_lwc_verify_tag =
	     lwc_outState == 2'd2 && cc_piso_validsVec[0] &&
	     lwc_tagFifo_rv[32] ;
  // rule RL_lwc_get_tag_data 
  assign WILL_FIRE_RL_lwc_get_tag_data =
	     lwc_pdiState == 3'd4 && !lwc_tagFifo_rv_port1__read[32] &&
	     lwc_pdiReceiver_fifof_EMPTY_N ;
  // rule RL_lwc_sendout_data 
  assign WILL_FIRE_RL_lwc_sendout_data =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd1 &&
	     cc_piso_validsVec[0] ;
  // rule RL_cc_absorb_inbuf 
  assign WILL_FIRE_RL_cc_absorb_inbuf =
	     cc_opState == 2'd1 && cc_sipo_validBytes[0] &&
	     !cc_piso_validsVec[0] ||
	     cc_opState == 2'd1 && cc_sipo_validBytes[0] &&
	     !cc_piso_validsVec[4] &&
	     cc_piso_do_deq_whas ;
  // rule RL_cc_pad_after_full_word 
  assign WILL_FIRE_RL_cc_pad_after_full_word =
	     cc_inState == 2'd2 && !cc_sipo_zFill &&
	     (!cc_sipo_validBytes[0] || WILL_FIRE_RL_cc_absorb_inbuf) ;
  // rule RL_cc_squeeze_tag 
  assign WILL_FIRE_RL_cc_squeeze_tag =
	     cc_opState == 2'd3 &&
	     (!cc_piso_validsVec[0] ||
	      !cc_piso_validsVec[4] && cc_piso_do_deq_whas) ;
  // rule RL_lwc_get_pdi_hdr 
  assign WILL_FIRE_RL_lwc_get_pdi_hdr =
	     cc_inState == 2'd1 && lwc_pdiState == 3'd1 &&
	     (!cc_sipo_zFill && !cc_sipo_validBytes[0] &&
	      !lwc_headersFifo_rv_port1__read[32] &&
	      lwc_pdiReceiver_fifof_EMPTY_N ||
	      !cc_sipo_zFill && !lwc_headersFifo_rv_port1__read[32] &&
	      WILL_FIRE_RL_cc_absorb_inbuf &&
	      lwc_pdiReceiver_fifof_EMPTY_N) ;
  // rule RL_lwc_feed_core_pdi 
  assign WILL_FIRE_RL_lwc_feed_core_pdi =
	     cc_inState == 2'd1 &&
	     (lwc_pdiState == 3'd2 && !cc_sipo_zFill &&
	      !cc_sipo_validBytes[0] &&
	      lwc_pdiReceiver_fifof_EMPTY_N ||
	      lwc_pdiState == 3'd2 && !cc_sipo_zFill &&
	      WILL_FIRE_RL_cc_absorb_inbuf &&
	      lwc_pdiReceiver_fifof_EMPTY_N) ;
  // rule RL_cc_sipo_enq_deq 
  assign WILL_FIRE_RL_cc_sipo_enq_deq =
	     WILL_FIRE_RL_cc_absorb_inbuf || cc_sipo_enq_wire_whas ;
  // rule RL_lwc_out_status 
  assign WILL_FIRE_RL_lwc_out_status =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd3 ;
  // rule RL_lwc_doSender_fifof_incCtr 
  assign WILL_FIRE_RL_lwc_doSender_fifof_incCtr =
	     lwc_doSender_fifof_enqueueing_whas &&
	     !lwc_doSender_fifof_dequeueing_whas &&
	     lwc_doSender_fifof_x_wire_whas ;
  // rule RL_lwc_doSender_fifof_decCtr 
  assign WILL_FIRE_RL_lwc_doSender_fifof_decCtr =
	     !lwc_doSender_fifof_enqueueing_whas &&
	     lwc_doSender_fifof_dequeueing_whas ;
  // rule RL_lwc_doSender_fifof_both 
  assign WILL_FIRE_RL_lwc_doSender_fifof_both =
	     lwc_doSender_fifof_enqueueing_whas &&
	     lwc_doSender_fifof_dequeueing_whas &&
	     lwc_doSender_fifof_x_wire_whas ;
  // inputs to muxes for submodule ports 
  assign MUX_cc_inState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_D_OUT[30] ;
  assign MUX_cc_inState_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0 &&
	     lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 ;
  assign MUX_cc_inState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_feed_core_pdi &&
	     lwc_inSegFlags_550_BIT_1_551_AND_lwc_inSegFlag_ETC___d1594 ;
  assign MUX_cc_inbufFlags_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0 ;
  assign MUX_cc_opState_write_1__SEL_1 =
	     cc_opState == 2'd2 &&
	     (cc_step == 4'd10 || cc_step == 4'd6 && cc_slimPerm) ;
  assign MUX_cc_opState_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_get_key_data && lwc_sdiCounter == 32'd0 ;
  assign MUX_cc_opState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_pdi_instruction && !lwc_newKey &&
	     !lwc_pdiReceiver_fifof_D_OUT[30] ;
  assign MUX_cc_piso_enq_wire_wset_1__SEL_1 =
	     WILL_FIRE_RL_cc_absorb_inbuf && !cc_inbufFlags[7] &&
	     cc_inbufFlags[3] ;
  assign MUX_cc_sipo_enq_wire_wset_1__SEL_1 =
	     WILL_FIRE_RL_lwc_feed_core_pdi && !lwc_inSegFlags[1] ;
  assign MUX_lwc_doSender_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ;
  assign MUX_lwc_doSender_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ;
  assign MUX_lwc_headersFifo_rv_port1__write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 ||
	      lwc_pdiReceiver_fifof_D_OUT[29] &&
	      lwc_pdiReceiver_fifof_D_OUT[24]) ;
  assign MUX_lwc_outCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q2[15:0] != 16'd0 ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[31]) ;
  assign MUX_lwc_outCounter_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_sendout_data &&
	     NOT_lwc_outCounter_674_BITS_13_TO_1_693_EQ_0_6_ETC___d1709 ;
  assign MUX_lwc_outState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_verify_tag && lwc_outCounter[13:1] == 13'd0 ;
  assign MUX_lwc_outState_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ;
  assign MUX_lwc_outState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q2[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q2[24] ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[31]) ;
  assign MUX_lwc_pdiCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_get_tag_data || WILL_FIRE_RL_lwc_feed_core_pdi ;
  assign MUX_lwc_pdiState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_get_tag_data && lwc_pdiCounter[13:1] == 13'd0 ;
  assign MUX_lwc_pdiState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[15:0] != 16'd0 ||
	      lwc_pdiReceiver_fifof_D_OUT[24] ||
	      lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 &&
	      (lwc_pdiReceiver_fifof_D_OUT[25] &&
	       lwc_pdiReceiver_fifof_D_OUT[28] ||
	       lwc_pdiReceiver_fifof_D_OUT[31] &&
	       lwc_pdiReceiver_fifof_D_OUT[25])) ;
  assign MUX_lwc_pdiState_write_1__SEL_4 =
	     WILL_FIRE_RL_lwc_feed_core_pdi &&
	     (lwc_pdiCounter[13:1] == 13'd0 && !lwc_pdiCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 && lwc_pdiCounter[13:1] == 13'd0) ;
  assign MUX_lwc_sdiState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     lwc_pdiReceiver_fifof_D_OUT[30] ;
  assign MUX_lwc_statFailure_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_verify_tag &&
	     NOT_IF_lwc_tagFifo_rv_port0__read__670_BIT_32__ETC___d1692 ;
  assign MUX_cc_inState_write_1__VAL_3 =
	     lwc_inSegFlags[1] ?
	       2'd0 :
	       ((!cc_sipo_validBytes[4] &&
		 IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[3]) ?
		  2'd2 :
		  2'd0) ;
  assign MUX_cc_inState_write_1__VAL_4 = cc_inbufFlags[3] ? 2'd0 : 2'd1 ;
  assign MUX_cc_inbufFlags_write_1__VAL_1 =
	     { lwc_pdiReceiver_fifof_D_OUT[31],
	       !lwc_pdiReceiver_fifof_D_OUT[30],
	       !lwc_pdiReceiver_fifof_D_OUT[28] &&
	       !lwc_pdiReceiver_fifof_D_OUT[31],
	       lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 &&
	       (lwc_pdiReceiver_fifof_D_OUT[28] ||
		lwc_pdiReceiver_fifof_D_OUT[31]),
	       lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010,
	       lwc_pdiReceiver_fifof_D_OUT[29],
	       lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0,
	       lwc_pdiReceiver_fifof_D_OUT[26] } ;
  assign MUX_cc_opState_write_1__VAL_1 = cc_eoi ? 2'd3 : 2'd1 ;
  assign MUX_cc_piso_enq_wire_wset_1__VAL_1 =
	     { cc_sipo_block_4_BITS_255_TO_224_8_XOR_cc_spark_ETC___d100,
	       cc_sipo_block_4_BITS_223_TO_192_32_XOR_cc_spar_ETC___d134,
	       cc_sipo_block_4_BITS_191_TO_160_68_XOR_cc_spar_ETC___d170,
	       cc_sipo_block_4_BITS_159_TO_128_03_XOR_cc_spar_ETC___d205,
	       cc_sipo_block_4_BITS_127_TO_96_38_XOR_cc_spark_ETC___d239,
	       cc_sipo_block_4_BITS_95_TO_64_70_XOR_cc_sparkl_ETC___d271,
	       cc_sipo_block_4_BITS_63_TO_32_03_XOR_cc_sparkl_ETC___d304,
	       cc_sipo_block_4_BITS_31_TO_0_33_XOR_cc_sparkle_ETC___d334,
	       cc_sipo_validBytes } ;
  assign MUX_cc_piso_enq_wire_wset_1__VAL_2 =
	     { 128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ,
	       cc_keyBuf[127:96] ^ cc_sparkleState[383:352],
	       cc_keyBuf[95:64] ^ cc_sparkleState[351:320],
	       cc_keyBuf[63:32] ^ cc_sparkleState[319:288],
	       cc_keyBuf[31:0] ^ cc_sparkleState[287:256],
	       32'd65535 } ;
  assign MUX_cc_sipo_enq_wire_wset_1__VAL_1 =
	     { lwc_pdiCounter[13:1] == 13'd0 &&
	       (!lwc_pdiCounter[0] || lwc_finalRemainBytes == 2'd0) &&
	       lwc_inSegEoT &&
	       (!IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[3] ||
		cc_sipo_validBytes[4]),
	       IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578,
	       x__h42606 } ;
  assign MUX_cc_sparkleState_write_1__VAL_1 =
	     cc_inbufFlags[7] ?
	       { cc_keyBuf, cc_sipo_block } :
	       IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d360 ;
  assign MUX_cc_sparkleState_write_1__VAL_2 =
	     { cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d1208,
	       x__h32217 ^ tmpx__h29018,
	       x__h32589 ^ tmpy__h29019 } ;
  assign MUX_cc_step_write_1__VAL_1 = cc_step + 4'd1 ;
  assign MUX_lwc_doSender_fifof_cntr_r_write_1__VAL_2 =
	     lwc_doSender_fifof_cntr_r + 2'd1 ;
  always@(WILL_FIRE_RL_lwc_out_header or
	  MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_1 or
	  WILL_FIRE_RL_lwc_sendout_data or
	  MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_2 or
	  WILL_FIRE_RL_lwc_out_status or
	  MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case 
      WILL_FIRE_RL_lwc_out_header:
	  MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_1;
      WILL_FIRE_RL_lwc_sendout_data:
	  MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_2;
      WILL_FIRE_RL_lwc_out_status:
	  MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_3;
      default: MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
    endcase
  end
  assign MUX_lwc_doSender_fifof_q_0_write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd1) ?
	       MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 :
	       lwc_doSender_fifof_q_1 ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd2) ?
	       MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 :
	       { 1'd0,
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */   } ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__VAL_3 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */   } ;
  assign MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_1 =
	     { 1'd0, lwc_headersFifo_rv[31:0] } ;
  assign MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_2 =
	     { !cc_piso_validsVec[4], sw__h46250 } ;
  assign MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_3 =
	     { 4'd15, lwc_statFailure, 28'b0 } ;
  assign MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 =
	     (lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010) ?
	       { 1'd1,
		 (!lwc_pdiReceiver_fifof_D_OUT[31] &&
		  !lwc_pdiReceiver_fifof_D_OUT[28]) ?
		   4'd5 :
		   4'd4,
		 2'd0,
		 lwc_pdiReceiver_fifof_D_OUT[25],
		 lwc_pdiReceiver_fifof_D_OUT[28] ||
		 lwc_pdiReceiver_fifof_D_OUT[31],
		 8'b0,
		 lwc_pdiReceiver_fifof_D_OUT[15:0] } :
	       { 17'd103168, 16'bxxxxxxxxxxxxxxxx /* unspecified value */   } ;
  assign MUX_lwc_outCounter_write_1__VAL_1 =
	     (lwc_headersFifo_rv_BITS_31_TO_0__q2[15:0] == 16'd0) ?
	       14'd4 :
	       lwc_headersFifo_rv_BITS_31_TO_0__q2[15:2] ;
  assign MUX_lwc_outCounter_write_1__VAL_2 =
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ?
	       14'd4 :
	       x__h48946 ;
  assign MUX_lwc_outState_write_1__VAL_2 =
	     lwc_outSegLast ? (lwc_outSegPt ? 2'd2 : 2'd3) : 2'd0 ;
  assign MUX_lwc_outState_write_1__VAL_3 =
	     (lwc_headersFifo_rv_BITS_31_TO_0__q2[15:0] == 16'd0) ?
	       ((!lwc_headersFifo_rv_BITS_31_TO_0__q2[28] &&
		 !lwc_headersFifo_rv_BITS_31_TO_0__q2[31]) ?
		  2'd2 :
		  2'd3) :
	       2'd1 ;
  assign MUX_lwc_pdiCounter_write_1__VAL_1 = lwc_pdiCounter - 14'd1 ;
  assign MUX_lwc_pdiState_write_1__VAL_3 =
	     (lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0) ?
	       ((lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 &&
		 (lwc_pdiReceiver_fifof_D_OUT[25] &&
		  lwc_pdiReceiver_fifof_D_OUT[28] ||
		  lwc_pdiReceiver_fifof_D_OUT[31] &&
		  lwc_pdiReceiver_fifof_D_OUT[25])) ?
		  3'd3 :
		  ((!lwc_pdiReceiver_fifof_D_OUT[31] &&
		    !lwc_pdiReceiver_fifof_D_OUT[28]) ?
		     3'd5 :
		     3'd0)) :
	       3'd2 ;
  assign MUX_lwc_pdiState_write_1__VAL_4 =
	     (lwc_inSegEoT && lwc_inSegFlags[5]) ?
	       3'd5 :
	       IF_lwc_inSegEoT_556_AND_lwc_inSegFlags_550_BIT_ETC___d1630 ;
  assign MUX_lwc_sdiCounter_write_1__VAL_1 = lwc_sdiCounter - 32'd1 ;
  // inlined wires 
  always@(MUX_cc_sipo_enq_wire_wset_1__SEL_1 or
	  MUX_cc_sipo_enq_wire_wset_1__VAL_1 or
	  WILL_FIRE_RL_cc_sipo_zero_fill or
	  WILL_FIRE_RL_cc_pad_after_full_word)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_cc_sipo_enq_wire_wset_1__SEL_1:
	  cc_sipo_enq_wire_wget = MUX_cc_sipo_enq_wire_wset_1__VAL_1;
      WILL_FIRE_RL_cc_sipo_zero_fill: cc_sipo_enq_wire_wget = 37'd0;
      WILL_FIRE_RL_cc_pad_after_full_word:
	  cc_sipo_enq_wire_wget = 37'h1000000080;
      default: cc_sipo_enq_wire_wget =
		   37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
    endcase
  end
  assign cc_sipo_enq_wire_whas =
	     WILL_FIRE_RL_lwc_feed_core_pdi && !lwc_inSegFlags[1] ||
	     WILL_FIRE_RL_cc_sipo_zero_fill ||
	     WILL_FIRE_RL_cc_pad_after_full_word ;
  assign cc_piso_enq_wire_wget =
	     MUX_cc_piso_enq_wire_wset_1__SEL_1 ?
	       MUX_cc_piso_enq_wire_wset_1__VAL_1 :
	       MUX_cc_piso_enq_wire_wset_1__VAL_2 ;
  assign cc_piso_enq_wire_whas =
	     WILL_FIRE_RL_cc_absorb_inbuf && !cc_inbufFlags[7] &&
	     cc_inbufFlags[3] ||
	     WILL_FIRE_RL_cc_squeeze_tag ;
  assign lwc_doSender_fifof_x_wire_whas =
	     WILL_FIRE_RL_lwc_out_header || WILL_FIRE_RL_lwc_sendout_data ||
	     WILL_FIRE_RL_lwc_out_status ;
  assign cc_piso_do_deq_whas =
	     WILL_FIRE_RL_lwc_sendout_data || WILL_FIRE_RL_lwc_verify_tag ;
  assign lwc_pdiReceiver_deq_pw_whas =
	     WILL_FIRE_RL_lwc_get_tag_data || WILL_FIRE_RL_lwc_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_pdi_instruction ;
  assign lwc_sdiReceiver_deq_pw_whas =
	     WILL_FIRE_RL_lwc_get_key_data || WILL_FIRE_RL_lwc_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_get_sdi_inst ;
  assign lwc_doSender_fifof_enqueueing_whas =
	     WILL_FIRE_RL_lwc_out_status || WILL_FIRE_RL_lwc_sendout_data ||
	     WILL_FIRE_RL_lwc_out_header ;
  assign lwc_doSender_fifof_dequeueing_whas =
	     lwc_doSender_fifof_cntr_r != 2'd0 && do_ready ;
  assign lwc_headersFifo_rv_port1__read =
	     WILL_FIRE_RL_lwc_out_header ?
	       MUX_lwc_doSender_fifof_q_1_write_1__VAL_3 :
	       lwc_headersFifo_rv ;
  assign lwc_headersFifo_rv_EN_port1__write =
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 ||
	      lwc_pdiReceiver_fifof_D_OUT[29] &&
	      lwc_pdiReceiver_fifof_D_OUT[24]) ||
	     WILL_FIRE_RL_lwc_enq_tag ;
  assign lwc_headersFifo_rv_port1__write_1 =
	     MUX_lwc_headersFifo_rv_port1__write_1__SEL_1 ?
	       MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 :
	       33'h183000010 ;
  assign lwc_headersFifo_rv_port2__read =
	     lwc_headersFifo_rv_EN_port1__write ?
	       lwc_headersFifo_rv_port1__write_1 :
	       lwc_headersFifo_rv_port1__read ;
  assign lwc_tagFifo_rv_port1__read =
	     WILL_FIRE_RL_lwc_verify_tag ?
	       MUX_lwc_doSender_fifof_q_1_write_1__VAL_3 :
	       lwc_tagFifo_rv ;
  assign lwc_tagFifo_rv_port1__write_1 =
	     { 1'd1, lwc_pdiReceiver_fifof_D_OUT } ;
  assign lwc_tagFifo_rv_port2__read =
	     WILL_FIRE_RL_lwc_get_tag_data ?
	       lwc_tagFifo_rv_port1__write_1 :
	       lwc_tagFifo_rv_port1__read ;
  // register cc_eoi 
  assign cc_eoi_D_IN = cc_inbufFlags[0] && cc_sipo_lastBlock ;
  assign cc_eoi_EN = WILL_FIRE_RL_cc_absorb_inbuf ;
  // register cc_inState 
  always@(MUX_cc_inState_write_1__SEL_1 or
	  MUX_cc_inState_write_1__SEL_2 or
	  MUX_cc_inState_write_1__SEL_3 or
	  MUX_cc_inState_write_1__VAL_3 or
	  WILL_FIRE_RL_cc_pad_after_full_word or
	  MUX_cc_inState_write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_cc_inState_write_1__SEL_1: cc_inState_D_IN = 2'd1;
      MUX_cc_inState_write_1__SEL_2: cc_inState_D_IN = 2'd0;
      MUX_cc_inState_write_1__SEL_3:
	  cc_inState_D_IN = MUX_cc_inState_write_1__VAL_3;
      WILL_FIRE_RL_cc_pad_after_full_word:
	  cc_inState_D_IN = MUX_cc_inState_write_1__VAL_4;
      default: cc_inState_D_IN = 2'bxx /* unspecified value */  ;
    endcase
  end
  assign cc_inState_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_D_OUT[30] ||
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0 &&
	     lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 ||
	     WILL_FIRE_RL_lwc_feed_core_pdi &&
	     lwc_inSegFlags_550_BIT_1_551_AND_lwc_inSegFlag_ETC___d1594 ||
	     WILL_FIRE_RL_cc_pad_after_full_word ;
  // register cc_inbufFlags 
  assign cc_inbufFlags_D_IN =
	     MUX_cc_inbufFlags_write_1__SEL_1 ?
	       MUX_cc_inbufFlags_write_1__VAL_1 :
	       lwc_inSegFlags ;
  assign cc_inbufFlags_EN =
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0 ||
	     WILL_FIRE_RL_lwc_feed_core_pdi ;
  // register cc_incomplete 
  assign cc_incomplete_D_IN =
	     !IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[3] ||
	     !cc_sipo_validBytes[4] ;
  assign cc_incomplete_EN = MUX_cc_sipo_enq_wire_wset_1__SEL_1 ;
  // register cc_keyBuf 
  assign cc_keyBuf_D_IN =
	     { lwc_sdiReceiver_fifof_D_OUT[7:0],
	       lwc_sdiReceiver_fifof_D_OUT[15:8],
	       lwc_sdiReceiver_fifof_D_OUT[23:16],
	       lwc_sdiReceiver_fifof_D_OUT[31:24],
	       cc_keyBuf[127:32] } ;
  assign cc_keyBuf_EN = WILL_FIRE_RL_lwc_get_key_data ;
  // register cc_opState 
  always@(MUX_cc_opState_write_1__SEL_1 or
	  MUX_cc_opState_write_1__VAL_1 or
	  WILL_FIRE_RL_cc_squeeze_tag or
	  MUX_cc_opState_write_1__SEL_2 or
	  MUX_cc_opState_write_1__SEL_3 or WILL_FIRE_RL_cc_absorb_inbuf)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_cc_opState_write_1__SEL_1:
	  cc_opState_D_IN = MUX_cc_opState_write_1__VAL_1;
      WILL_FIRE_RL_cc_squeeze_tag: cc_opState_D_IN = 2'd0;
      MUX_cc_opState_write_1__SEL_2 || MUX_cc_opState_write_1__SEL_3:
	  cc_opState_D_IN = 2'd1;
      WILL_FIRE_RL_cc_absorb_inbuf: cc_opState_D_IN = 2'd2;
      default: cc_opState_D_IN = 2'bxx /* unspecified value */  ;
    endcase
  end
  assign cc_opState_EN =
	     cc_opState == 2'd2 &&
	     (cc_step == 4'd10 || cc_step == 4'd6 && cc_slimPerm) ||
	     WILL_FIRE_RL_lwc_get_key_data && lwc_sdiCounter == 32'd0 ||
	     WILL_FIRE_RL_lwc_pdi_instruction && !lwc_newKey &&
	     !lwc_pdiReceiver_fifof_D_OUT[30] ||
	     WILL_FIRE_RL_cc_squeeze_tag ||
	     WILL_FIRE_RL_cc_absorb_inbuf ;
  // register cc_piso_blockVec 
  assign cc_piso_blockVec_D_IN =
	     cc_piso_enq_wire_whas ?
	       cc_piso_enq_wire_wget[287:32] :
	       { cc_piso_blockVec[255:224], cc_piso_blockVec[255:32] } ;
  assign cc_piso_blockVec_EN = cc_piso_do_deq_whas || cc_piso_enq_wire_whas ;
  // register cc_piso_validsVec 
  assign cc_piso_validsVec_D_IN =
	     cc_piso_enq_wire_whas ?
	       cc_piso_enq_wire_wget[31:0] :
	       { 4'd0, cc_piso_validsVec[31:4] } ;
  assign cc_piso_validsVec_EN = cc_piso_do_deq_whas || cc_piso_enq_wire_whas ;
  // register cc_sipo_block 
  assign cc_sipo_block_D_IN =
	     { cc_sipo_enq_wire_wget[31:0], cc_sipo_block[255:32] } ;
  assign cc_sipo_block_EN =
	     WILL_FIRE_RL_cc_sipo_enq_deq && cc_sipo_enq_wire_whas ;
  // register cc_sipo_lastBlock 
  assign cc_sipo_lastBlock_D_IN =
	     cc_sipo_enq_wire_whas && cc_sipo_enq_wire_wget[36] ;
  assign cc_sipo_lastBlock_EN =
	     WILL_FIRE_RL_cc_sipo_enq_deq &&
	     (WILL_FIRE_RL_cc_absorb_inbuf ||
	      cc_sipo_enq_wire_whas && cc_sipo_enq_wire_wget[36]) ;
  // register cc_sipo_validBytes 
  assign cc_sipo_validBytes_D_IN =
	     cc_sipo_enq_wire_whas ?
	       (WILL_FIRE_RL_cc_absorb_inbuf ?
		  { cc_sipo_enq_wire_wget[35:32], 28'd0 } :
		  { cc_sipo_enq_wire_wget[35:32],
		    cc_sipo_validBytes[31:4] }) :
	       32'd0 ;
  assign cc_sipo_validBytes_EN = WILL_FIRE_RL_cc_sipo_enq_deq ;
  // register cc_sipo_zFill 
  assign cc_sipo_zFill_D_IN =
	     cc_sipo_enq_wire_whas && cc_sipo_enq_wire_wget[36] ;
  assign cc_sipo_zFill_EN =
	     WILL_FIRE_RL_cc_sipo_enq_deq &&
	     (WILL_FIRE_RL_cc_absorb_inbuf ||
	      cc_sipo_enq_wire_whas && !cc_sipo_validBytes[4] &&
	      cc_sipo_enq_wire_wget[36]) ;
  // register cc_slimPerm 
  assign cc_slimPerm_D_IN = !cc_inbufFlags[7] && !cc_sipo_lastBlock ;
  assign cc_slimPerm_EN = WILL_FIRE_RL_cc_absorb_inbuf ;
  // register cc_sparkleState 
  assign cc_sparkleState_D_IN =
	     WILL_FIRE_RL_cc_absorb_inbuf ?
	       MUX_cc_sparkleState_write_1__VAL_1 :
	       MUX_cc_sparkleState_write_1__VAL_2 ;
  assign cc_sparkleState_EN =
	     WILL_FIRE_RL_cc_absorb_inbuf || cc_opState == 2'd2 ;
  // register cc_step 
  assign cc_step_D_IN =
	     (cc_opState == 2'd2) ? MUX_cc_step_write_1__VAL_1 : 4'd0 ;
  assign cc_step_EN = cc_opState == 2'd2 || WILL_FIRE_RL_cc_absorb_inbuf ;
  // register lwc_doSender_fifof_cntr_r 
  assign lwc_doSender_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ?
	       lwc_doSender_fifof_cntr_r_421_MINUS_1___d1430 :
	       MUX_lwc_doSender_fifof_cntr_r_write_1__VAL_2 ;
  assign lwc_doSender_fifof_cntr_r_EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ||
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr ;
  // register lwc_doSender_fifof_q_0 
  always@(MUX_lwc_doSender_fifof_q_0_write_1__SEL_1 or
	  MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 or
	  MUX_lwc_doSender_fifof_q_0_write_1__SEL_2 or
	  MUX_lwc_doSender_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_doSender_fifof_decCtr or lwc_doSender_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_lwc_doSender_fifof_q_0_write_1__SEL_1:
	  lwc_doSender_fifof_q_0_D_IN =
	      MUX_lwc_doSender_fifof_q_0_write_1__VAL_1;
      MUX_lwc_doSender_fifof_q_0_write_1__SEL_2:
	  lwc_doSender_fifof_q_0_D_IN =
	      MUX_lwc_doSender_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
	  lwc_doSender_fifof_q_0_D_IN = lwc_doSender_fifof_q_1;
      default: lwc_doSender_fifof_q_0_D_IN =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
    endcase
  end
  assign lwc_doSender_fifof_q_0_EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;
  // register lwc_doSender_fifof_q_1 
  always@(MUX_lwc_doSender_fifof_q_1_write_1__SEL_1 or
	  MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 or
	  MUX_lwc_doSender_fifof_q_1_write_1__SEL_2 or
	  MUX_lwc_doSender_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_doSender_fifof_decCtr or
	  MUX_lwc_doSender_fifof_q_1_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_lwc_doSender_fifof_q_1_write_1__SEL_1:
	  lwc_doSender_fifof_q_1_D_IN =
	      MUX_lwc_doSender_fifof_q_0_write_1__VAL_1;
      MUX_lwc_doSender_fifof_q_1_write_1__SEL_2:
	  lwc_doSender_fifof_q_1_D_IN =
	      MUX_lwc_doSender_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
	  lwc_doSender_fifof_q_1_D_IN =
	      MUX_lwc_doSender_fifof_q_1_write_1__VAL_3;
      default: lwc_doSender_fifof_q_1_D_IN =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
    endcase
  end
  assign lwc_doSender_fifof_q_1_EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;
  // register lwc_finalRemainBytes 
  assign lwc_finalRemainBytes_D_IN = lwc_pdiReceiver_fifof_D_OUT[1:0] ;
  assign lwc_finalRemainBytes_EN = WILL_FIRE_RL_lwc_get_pdi_hdr ;
  // register lwc_headersFifo_rv 
  assign lwc_headersFifo_rv_D_IN = lwc_headersFifo_rv_port2__read ;
  assign lwc_headersFifo_rv_EN = 1'b1 ;
  // register lwc_inSegEoT 
  assign lwc_inSegEoT_D_IN = lwc_pdiReceiver_fifof_D_OUT[25] ;
  assign lwc_inSegEoT_EN = WILL_FIRE_RL_lwc_get_pdi_hdr ;
  // register lwc_inSegFlags 
  assign lwc_inSegFlags_D_IN = MUX_cc_inbufFlags_write_1__VAL_1 ;
  assign lwc_inSegFlags_EN = WILL_FIRE_RL_lwc_get_pdi_hdr ;
  // register lwc_inSegLast 
  assign lwc_inSegLast_D_IN = lwc_pdiReceiver_fifof_D_OUT[24] ;
  assign lwc_inSegLast_EN = WILL_FIRE_RL_lwc_get_pdi_hdr ;
  // register lwc_newKey 
  assign lwc_newKey_D_IN = lwc_pdiReceiver_fifof_D_OUT[30] ;
  assign lwc_newKey_EN = WILL_FIRE_RL_lwc_pdi_instruction ;
  // register lwc_outCounter 
  always@(MUX_lwc_outCounter_write_1__SEL_1 or
	  MUX_lwc_outCounter_write_1__VAL_1 or
	  MUX_lwc_outCounter_write_1__SEL_2 or
	  MUX_lwc_outCounter_write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_verify_tag or x__h48946)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_lwc_outCounter_write_1__SEL_1:
	  lwc_outCounter_D_IN = MUX_lwc_outCounter_write_1__VAL_1;
      MUX_lwc_outCounter_write_1__SEL_2:
	  lwc_outCounter_D_IN = MUX_lwc_outCounter_write_1__VAL_2;
      WILL_FIRE_RL_lwc_verify_tag: lwc_outCounter_D_IN = x__h48946;
      default: lwc_outCounter_D_IN =
		   14'bxxxxxxxxxxxxxx /* unspecified value */  ;
    endcase
  end
  assign lwc_outCounter_EN =
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q2[15:0] != 16'd0 ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[31]) ||
	     WILL_FIRE_RL_lwc_sendout_data &&
	     NOT_lwc_outCounter_674_BITS_13_TO_1_693_EQ_0_6_ETC___d1709 ||
	     WILL_FIRE_RL_lwc_verify_tag ;
  // register lwc_outRemainder 
  assign lwc_outRemainder_D_IN = lwc_headersFifo_rv_BITS_31_TO_0__q2[1:0] ;
  assign lwc_outRemainder_EN = WILL_FIRE_RL_lwc_out_header ;
  // register lwc_outSegLast 
  assign lwc_outSegLast_D_IN = lwc_headersFifo_rv_BITS_31_TO_0__q2[24] ;
  assign lwc_outSegLast_EN = WILL_FIRE_RL_lwc_out_header ;
  // register lwc_outSegPt 
  assign lwc_outSegPt_D_IN =
	     !lwc_headersFifo_rv_BITS_31_TO_0__q2[28] &&
	     !lwc_headersFifo_rv_BITS_31_TO_0__q2[31] ;
  assign lwc_outSegPt_EN = WILL_FIRE_RL_lwc_out_header ;
  // register lwc_outState 
  always@(MUX_lwc_outState_write_1__SEL_1 or
	  MUX_lwc_outState_write_1__SEL_2 or
	  MUX_lwc_outState_write_1__VAL_2 or
	  MUX_lwc_outState_write_1__SEL_3 or
	  MUX_lwc_outState_write_1__VAL_3 or WILL_FIRE_RL_lwc_out_status)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_lwc_outState_write_1__SEL_1: lwc_outState_D_IN = 2'd3;
      MUX_lwc_outState_write_1__SEL_2:
	  lwc_outState_D_IN = MUX_lwc_outState_write_1__VAL_2;
      MUX_lwc_outState_write_1__SEL_3:
	  lwc_outState_D_IN = MUX_lwc_outState_write_1__VAL_3;
      WILL_FIRE_RL_lwc_out_status: lwc_outState_D_IN = 2'd0;
      default: lwc_outState_D_IN = 2'bxx /* unspecified value */  ;
    endcase
  end
  assign lwc_outState_EN =
	     WILL_FIRE_RL_lwc_verify_tag && lwc_outCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q2[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q2[24] ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q2[31]) ||
	     WILL_FIRE_RL_lwc_out_status ;
  // register lwc_pdiCounter 
  assign lwc_pdiCounter_D_IN =
	     MUX_lwc_pdiCounter_write_1__SEL_1 ?
	       MUX_lwc_pdiCounter_write_1__VAL_1 :
	       lwc_pdiReceiver_fifof_D_OUT[15:2] ;
  assign lwc_pdiCounter_EN =
	     WILL_FIRE_RL_lwc_get_tag_data ||
	     WILL_FIRE_RL_lwc_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_get_pdi_hdr ;
  // register lwc_pdiState 
  always@(MUX_lwc_pdiState_write_1__SEL_3 or
	  MUX_lwc_pdiState_write_1__VAL_3 or
	  MUX_lwc_pdiState_write_1__SEL_4 or
	  MUX_lwc_pdiState_write_1__VAL_4 or
	  MUX_lwc_pdiState_write_1__SEL_1 or
	  WILL_FIRE_RL_lwc_enq_tag or
	  MUX_cc_inState_write_1__SEL_1 or WILL_FIRE_RL_lwc_get_tag_hdr)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_lwc_pdiState_write_1__SEL_3:
	  lwc_pdiState_D_IN = MUX_lwc_pdiState_write_1__VAL_3;
      MUX_lwc_pdiState_write_1__SEL_4:
	  lwc_pdiState_D_IN = MUX_lwc_pdiState_write_1__VAL_4;
      MUX_lwc_pdiState_write_1__SEL_1 || WILL_FIRE_RL_lwc_enq_tag:
	  lwc_pdiState_D_IN = 3'd0;
      MUX_cc_inState_write_1__SEL_1: lwc_pdiState_D_IN = 3'd1;
      WILL_FIRE_RL_lwc_get_tag_hdr: lwc_pdiState_D_IN = 3'd4;
      default: lwc_pdiState_D_IN = 3'bxxx /* unspecified value */  ;
    endcase
  end
  assign lwc_pdiState_EN =
	     WILL_FIRE_RL_lwc_get_tag_data && lwc_pdiCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_D_OUT[30] ||
	     WILL_FIRE_RL_lwc_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[15:0] != 16'd0 ||
	      lwc_pdiReceiver_fifof_D_OUT[24] ||
	      lwc_pdiReceiver_fifof_D_OUT[31:29] == 3'b010 &&
	      (lwc_pdiReceiver_fifof_D_OUT[25] &&
	       lwc_pdiReceiver_fifof_D_OUT[28] ||
	       lwc_pdiReceiver_fifof_D_OUT[31] &&
	       lwc_pdiReceiver_fifof_D_OUT[25])) ||
	     WILL_FIRE_RL_lwc_feed_core_pdi &&
	     (lwc_pdiCounter[13:1] == 13'd0 && !lwc_pdiCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_pdiCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_enq_tag ||
	     WILL_FIRE_RL_lwc_get_tag_hdr ;
  // register lwc_sdiCounter 
  assign lwc_sdiCounter_D_IN =
	     WILL_FIRE_RL_lwc_get_key_data ?
	       MUX_lwc_sdiCounter_write_1__VAL_1 :
	       32'd3 ;
  assign lwc_sdiCounter_EN =
	     WILL_FIRE_RL_lwc_get_key_data || WILL_FIRE_RL_lwc_get_sdi_hdr ;
  // register lwc_sdiState 
  always@(MUX_lwc_sdiState_write_1__SEL_1 or
	  MUX_cc_opState_write_1__SEL_2 or
	  WILL_FIRE_RL_lwc_get_sdi_inst or WILL_FIRE_RL_lwc_get_sdi_hdr)
  begin
    case (1'b1) // synopsys parallel_case 
      MUX_lwc_sdiState_write_1__SEL_1: lwc_sdiState_D_IN = 2'd1;
      MUX_cc_opState_write_1__SEL_2: lwc_sdiState_D_IN = 2'd0;
      WILL_FIRE_RL_lwc_get_sdi_inst: lwc_sdiState_D_IN = 2'd2;
      WILL_FIRE_RL_lwc_get_sdi_hdr: lwc_sdiState_D_IN = 2'd3;
      default: lwc_sdiState_D_IN = 2'bxx /* unspecified value */  ;
    endcase
  end
  assign lwc_sdiState_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     lwc_pdiReceiver_fifof_D_OUT[30] ||
	     WILL_FIRE_RL_lwc_get_key_data && lwc_sdiCounter == 32'd0 ||
	     WILL_FIRE_RL_lwc_get_sdi_inst ||
	     WILL_FIRE_RL_lwc_get_sdi_hdr ;
  // register lwc_statFailure 
  assign lwc_statFailure_D_IN = MUX_lwc_statFailure_write_1__SEL_1 ;
  assign lwc_statFailure_EN =
	     WILL_FIRE_RL_lwc_verify_tag &&
	     NOT_IF_lwc_tagFifo_rv_port0__read__670_BIT_32__ETC___d1692 ||
	     WILL_FIRE_RL_lwc_out_header ;
  // register lwc_tagFifo_rv 
  assign lwc_tagFifo_rv_D_IN = lwc_tagFifo_rv_port2__read ;
  assign lwc_tagFifo_rv_EN = 1'b1 ;
  // submodule lwc_pdiReceiver_fifof 
  assign lwc_pdiReceiver_fifof_D_IN = pdi_data ;
  assign lwc_pdiReceiver_fifof_ENQ =
	     lwc_pdiReceiver_fifof_FULL_N && pdi_valid ;
  assign lwc_pdiReceiver_fifof_DEQ = lwc_pdiReceiver_deq_pw_whas ;
  assign lwc_pdiReceiver_fifof_CLR = 1'b0 ;
  // submodule lwc_sdiReceiver_fifof 
  assign lwc_sdiReceiver_fifof_D_IN = sdi_data ;
  assign lwc_sdiReceiver_fifof_ENQ =
	     lwc_sdiReceiver_fifof_FULL_N && sdi_valid ;
  assign lwc_sdiReceiver_fifof_DEQ = lwc_sdiReceiver_deq_pw_whas ;
  assign lwc_sdiReceiver_fifof_CLR = 1'b0 ;
  // remaining internal signals 
  assign IF_NOT_cc_sipo_validBytes_BIT_0_9_0_AND_cc_inb_ETC___d354 =
	     (!cc_sipo_validBytes[0] && cc_inbufFlags[4]) ?
	       cc_sipo_block_4_BITS_31_TO_0_33_XOR_cc_sparkle_ETC___d334[7:0] :
	       cc_sipo_block[7:0] ;
  assign IF_NOT_cc_sipo_validBytes_BIT_4_0_AND_cc_inbuf_ETC___d324 =
	     (!cc_sipo_validBytes[4] && cc_inbufFlags[4]) ?
	       cc_sipo_block_4_BITS_63_TO_32_03_XOR_cc_sparkl_ETC___d304[7:0] :
	       cc_sipo_block[39:32] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d103 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[31]) ?
	       cc_sipo_block_4_BITS_255_TO_224_8_XOR_cc_spark_ETC___d100[31:24] :
	       cc_sipo_block[255:248] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d109 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[30]) ?
	       cc_sipo_block_4_BITS_255_TO_224_8_XOR_cc_spark_ETC___d100[23:16] :
	       cc_sipo_block[247:240] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d116 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[29]) ?
	       cc_sipo_block_4_BITS_255_TO_224_8_XOR_cc_spark_ETC___d100[15:8] :
	       cc_sipo_block[239:232] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d122 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[28]) ?
	       cc_sipo_block_4_BITS_255_TO_224_8_XOR_cc_spark_ETC___d100[7:0] :
	       cc_sipo_block[231:224] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d137 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[27]) ?
	       cc_sipo_block_4_BITS_223_TO_192_32_XOR_cc_spar_ETC___d134[31:24] :
	       cc_sipo_block[223:216] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d143 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[26]) ?
	       cc_sipo_block_4_BITS_223_TO_192_32_XOR_cc_spar_ETC___d134[23:16] :
	       cc_sipo_block[215:208] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d150 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[25]) ?
	       cc_sipo_block_4_BITS_223_TO_192_32_XOR_cc_spar_ETC___d134[15:8] :
	       cc_sipo_block[207:200] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d156 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[24]) ?
	       cc_sipo_block_4_BITS_223_TO_192_32_XOR_cc_spar_ETC___d134[7:0] :
	       cc_sipo_block[199:192] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d173 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[23]) ?
	       cc_sipo_block_4_BITS_191_TO_160_68_XOR_cc_spar_ETC___d170[31:24] :
	       cc_sipo_block[191:184] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d179 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[22]) ?
	       cc_sipo_block_4_BITS_191_TO_160_68_XOR_cc_spar_ETC___d170[23:16] :
	       cc_sipo_block[183:176] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d186 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[21]) ?
	       cc_sipo_block_4_BITS_191_TO_160_68_XOR_cc_spar_ETC___d170[15:8] :
	       cc_sipo_block[175:168] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d192 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[20]) ?
	       cc_sipo_block_4_BITS_191_TO_160_68_XOR_cc_spar_ETC___d170[7:0] :
	       cc_sipo_block[167:160] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d208 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[19]) ?
	       cc_sipo_block_4_BITS_159_TO_128_03_XOR_cc_spar_ETC___d205[31:24] :
	       cc_sipo_block[159:152] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d214 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[18]) ?
	       cc_sipo_block_4_BITS_159_TO_128_03_XOR_cc_spar_ETC___d205[23:16] :
	       cc_sipo_block[151:144] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d221 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[17]) ?
	       cc_sipo_block_4_BITS_159_TO_128_03_XOR_cc_spar_ETC___d205[15:8] :
	       cc_sipo_block[143:136] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d227 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[16]) ?
	       cc_sipo_block_4_BITS_159_TO_128_03_XOR_cc_spar_ETC___d205[7:0] :
	       cc_sipo_block[135:128] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d242 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[15]) ?
	       cc_sipo_block_4_BITS_127_TO_96_38_XOR_cc_spark_ETC___d239[31:24] :
	       cc_sipo_block[127:120] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d248 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[14]) ?
	       cc_sipo_block_4_BITS_127_TO_96_38_XOR_cc_spark_ETC___d239[23:16] :
	       cc_sipo_block[119:112] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d255 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[13]) ?
	       cc_sipo_block_4_BITS_127_TO_96_38_XOR_cc_spark_ETC___d239[15:8] :
	       cc_sipo_block[111:104] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d261 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[12]) ?
	       cc_sipo_block_4_BITS_127_TO_96_38_XOR_cc_spark_ETC___d239[7:0] :
	       cc_sipo_block[103:96] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d274 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[11]) ?
	       cc_sipo_block_4_BITS_95_TO_64_70_XOR_cc_sparkl_ETC___d271[31:24] :
	       cc_sipo_block[95:88] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d280 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[10]) ?
	       cc_sipo_block_4_BITS_95_TO_64_70_XOR_cc_sparkl_ETC___d271[23:16] :
	       cc_sipo_block[87:80] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d287 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[9]) ?
	       cc_sipo_block_4_BITS_95_TO_64_70_XOR_cc_sparkl_ETC___d271[15:8] :
	       cc_sipo_block[79:72] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d293 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[8]) ?
	       cc_sipo_block_4_BITS_95_TO_64_70_XOR_cc_sparkl_ETC___d271[7:0] :
	       cc_sipo_block[71:64] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d307 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[7]) ?
	       cc_sipo_block_4_BITS_63_TO_32_03_XOR_cc_sparkl_ETC___d304[31:24] :
	       cc_sipo_block[63:56] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d313 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[6]) ?
	       cc_sipo_block_4_BITS_63_TO_32_03_XOR_cc_sparkl_ETC___d304[23:16] :
	       cc_sipo_block[55:48] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d320 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[5]) ?
	       cc_sipo_block_4_BITS_63_TO_32_03_XOR_cc_sparkl_ETC___d304[15:8] :
	       cc_sipo_block[47:40] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d337 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[3]) ?
	       cc_sipo_block_4_BITS_31_TO_0_33_XOR_cc_sparkle_ETC___d334[31:24] :
	       cc_sipo_block[31:24] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d343 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[2]) ?
	       cc_sipo_block_4_BITS_31_TO_0_33_XOR_cc_sparkle_ETC___d334[23:16] :
	       cc_sipo_block[23:16] ;
  assign IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d350 =
	     (cc_inbufFlags[4] && !cc_sipo_validBytes[1]) ?
	       cc_sipo_block_4_BITS_31_TO_0_33_XOR_cc_sparkle_ETC___d334[15:8] :
	       cc_sipo_block[15:8] ;
  assign IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d163 =
	     { IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d90,
	       cc_sparkleState[351:256],
	       cc_inbufFlags[4] ?
		 t__h15563 :
		 cc_sparkleState[255:224] ^ t__h15563,
	       cc_inbufFlags[4] ?
		 t__h15579 :
		 cc_sparkleState[223:192] ^ t__h15579 } ;
  assign IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d234 =
	     { IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d163,
	       cc_inbufFlags[4] ?
		 t__h15595 :
		 cc_sparkleState[191:160] ^ t__h15595,
	       cc_inbufFlags[4] ?
		 t__h15611 :
		 cc_sparkleState[159:128] ^ t__h15611 } ;
  assign IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d299 =
	     { IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d234,
	       cc_inbufFlags[4] ?
		 cc_sparkleState[127:96] ^ z__h15562 :
		 z__h15562,
	       cc_inbufFlags[4] ?
		 cc_sparkleState[95:64] ^ z__h15578 :
		 z__h15578 } ;
  assign IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d360 =
	     { IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d299,
	       cc_inbufFlags[4] ?
		 cc_sparkleState[63:32] ^ z__h15594 :
		 z__h15594,
	       cc_inbufFlags[4] ?
		 cc_sparkleState[31:0] ^ z__h15610 :
		 z__h15610 } ;
  assign IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d90 =
	     cc_sipo_lastBlock ?
	       { cc_sparkleState[383:379],
		 spliced_bits__h16011,
		 cc_sparkleState[375:352] } :
	       cc_sparkleState[383:352] ;
  assign IF_lwc_inSegEoT_556_AND_lwc_inSegFlags_550_BIT_ETC___d1630 =
	     (lwc_inSegEoT && lwc_inSegFlags[4]) ?
	       3'd3 :
	       (lwc_inSegLast ? 3'd0 : 3'd1) ;
  assign IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578 =
	     (lwc_pdiCounter[13:1] == 13'd0 &&
	      (lwc_inSegEoT && !lwc_pdiCounter[0] ||
	       lwc_finalRemainBytes == 2'd0 && lwc_inSegEoT)) ?
	       CASE_lwc_finalRemainBytes_0_0b1111_1_0b1_2_0b1_ETC__q1 :
	       4'hF ;
  assign NOT_IF_lwc_tagFifo_rv_port0__read__670_BIT_32__ETC___d1692 =
	     lwc_tagFifo_rv[31:0] != sw__h46250 ;
  assign NOT_lwc_outCounter_674_BITS_13_TO_1_693_EQ_0_6_ETC___d1709 =
	     lwc_outCounter[13:1] != 13'd0 ||
	     lwc_outRemainder != 2'd0 && lwc_outCounter[0] ||
	     lwc_outSegPt && lwc_outSegLast ;
  assign _dfoo1 =
	     lwc_doSender_fifof_cntr_r != 2'd2 ||
	     lwc_doSender_fifof_cntr_r_421_MINUS_1___d1430 == 2'd1 ;
  assign _dfoo3 =
	     lwc_doSender_fifof_cntr_r != 2'd1 ||
	     lwc_doSender_fifof_cntr_r_421_MINUS_1___d1430 == 2'd0 ;
  assign cc_sipo_block_4_BITS_127_TO_96_38_XOR_cc_spark_ETC___d239 =
	     cc_sipo_block[127:96] ^ cc_sparkleState[127:96] ;
  assign cc_sipo_block_4_BITS_159_TO_128_03_XOR_cc_spar_ETC___d205 =
	     cc_sipo_block[159:128] ^ cc_sparkleState[159:128] ;
  assign cc_sipo_block_4_BITS_191_TO_160_68_XOR_cc_spar_ETC___d170 =
	     cc_sipo_block[191:160] ^ cc_sparkleState[191:160] ;
  assign cc_sipo_block_4_BITS_223_TO_192_32_XOR_cc_spar_ETC___d134 =
	     cc_sipo_block[223:192] ^ cc_sparkleState[223:192] ;
  assign cc_sipo_block_4_BITS_255_TO_224_8_XOR_cc_spark_ETC___d100 =
	     cc_sipo_block[255:224] ^ cc_sparkleState[255:224] ;
  assign cc_sipo_block_4_BITS_31_TO_0_33_XOR_cc_sparkle_ETC___d334 =
	     cc_sipo_block[31:0] ^ cc_sparkleState[31:0] ;
  assign cc_sipo_block_4_BITS_63_TO_32_03_XOR_cc_sparkl_ETC___d304 =
	     cc_sipo_block[63:32] ^ cc_sparkleState[63:32] ;
  assign cc_sipo_block_4_BITS_95_TO_64_70_XOR_cc_sparkl_ETC___d271 =
	     cc_sipo_block[95:64] ^ cc_sparkleState[95:64] ;
  assign cc_sparkleState_8_BITS_127_TO_100_62_CONCAT_cc_ETC___d679 =
	     y__h30184 ^ y__h30200 ;
  assign cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d1047 =
	     { cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d519,
	       x__h30023[31:30],
	       ~x__h30023[29:27],
	       x__h30023[26:24],
	       ~x__h30023[23],
	       x__h30023[22],
	       ~x__h30023[21:20],
	       x__h30023[19],
	       ~x__h30023[18],
	       x__h30023[17:16],
	       ~x__h30023[15:14],
	       x__h30023[13],
	       ~x__h30023[12:11],
	       x__h30023[10],
	       ~x__h30023[9],
	       x__h30023[8:7],
	       ~x__h30023[6],
	       x__h30023[5],
	       ~x__h30023[4],
	       x__h30023[3],
	       ~x__h30023[2:1],
	       x__h30023[0],
	       cc_sparkleState_8_BITS_127_TO_100_62_CONCAT_cc_ETC___d679,
	       ~x__h30507[31],
	       x__h30507[30],
	       ~x__h30507[29:24],
	       x__h30507[23],
	       ~x__h30507[22:20],
	       x__h30507[19:17],
	       ~x__h30507[16],
	       x__h30507[15],
	       ~x__h30507[14],
	       x__h30507[13],
	       ~x__h30507[12:11],
	       x__h30507[10:8],
	       ~x__h30507[7],
	       x__h30507[6:0],
	       y0__h29013,
	       x0__h29012,
	       x__h31120 ^ tmpx__h29018,
	       x__h31609 ^ tmpy__h29019 } ;
  assign cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d1208 =
	     { cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d1047,
	       x__h31762 ^ tmpx__h29018,
	       x__h32134 ^ tmpy__h29019 } ;
  assign cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d519 =
	     y__h29687 ^ y__h29703 ;
  assign const_x__h15623 =
	     cc_inbufFlags[6] ?
	       (cc_incomplete ? 3'd4 : 3'd5) :
	       (cc_incomplete ? 3'd6 : 3'd7) ;
  assign lwc_doSender_fifof_cntr_r_421_MINUS_1___d1430 =
	     lwc_doSender_fifof_cntr_r - 2'd1 ;
  assign lwc_headersFifo_rv_BITS_31_TO_0__q2 = lwc_headersFifo_rv[31:0] ;
  assign lwc_inSegFlags_550_BIT_1_551_AND_lwc_inSegFlag_ETC___d1594 =
	     lwc_inSegFlags[1] && lwc_inSegFlags[3] ||
	     lwc_pdiCounter[13:1] == 13'd0 && lwc_inSegEoT &&
	     lwc_inSegFlags[3] &&
	     !lwc_pdiCounter[0] ||
	     lwc_finalRemainBytes == 2'd0 && lwc_pdiCounter[13:1] == 13'd0 &&
	     lwc_inSegEoT &&
	     lwc_inSegFlags[3] ||
	     lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_555_A_ETC___d1591 ;
  assign lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_555_A_ETC___d1591 =
	     lwc_pdiCounter[13:1] == 13'd0 && !cc_sipo_validBytes[4] &&
	     lwc_inSegEoT &&
	     IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[3] &&
	     !lwc_inSegFlags[1] &&
	     !lwc_pdiCounter[0] ||
	     lwc_finalRemainBytes == 2'd0 && lwc_pdiCounter[13:1] == 13'd0 &&
	     !cc_sipo_validBytes[4] &&
	     lwc_inSegEoT &&
	     IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[3] &&
	     !lwc_inSegFlags[1] ;
  assign s_snd__h30419 = { cc_sparkleState[126:100], spliced_bits__h30300 } ;
  assign spliced_bits__h16011 = cc_sparkleState[378:376] ^ const_x__h15623 ;
  assign spliced_bits__h30300 = cc_sparkleState[99:96] ^ cc_step ;
  assign sw__h46250 =
	     { cc_piso_validsVec[0] ? cc_piso_blockVec[7:0] : 8'd0,
	       cc_piso_validsVec[1] ? cc_piso_blockVec[15:8] : 8'd0,
	       cc_piso_validsVec[2] ? cc_piso_blockVec[23:16] : 8'd0,
	       cc_piso_validsVec[3] ? cc_piso_blockVec[31:24] : 8'd0 } ;
  assign t__h15563 =
	     x__h16381 ^
	     IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d90 ;
  assign t__h15579 = x__h18050 ^ cc_sparkleState[351:320] ;
  assign t__h15595 = x__h19350 ^ cc_sparkleState[319:288] ;
  assign t__h15611 = x__h20650 ^ cc_sparkleState[287:256] ;
  assign tmpx__h29016 =
	     x__h31494 ^
	     { x__h30023[31:30],
	       ~x__h30023[29:27],
	       x__h30023[26:24],
	       ~x__h30023[23],
	       x__h30023[22],
	       ~x__h30023[21:20],
	       x__h30023[19],
	       ~x__h30023[18],
	       x__h30023[17:16],
	       ~x__h30023[15:14],
	       x__h30023[13],
	       ~x__h30023[12:11],
	       x__h30023[10],
	       ~x__h30023[9],
	       x__h30023[8:7],
	       ~x__h30023[6],
	       x__h30023[5],
	       ~x__h30023[4],
	       x__h30023[3],
	       ~x__h30023[2:1],
	       x__h30023[0] } ;
  assign tmpx__h29018 =
	     { tmpx__h29016[15:0],
	       tmpx__h29016[31:16] ^ tmpx__h29016[15:0] } ;
  assign tmpy__h29017 =
	     x__h31645 ^
	     cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d519 ;
  assign tmpy__h29019 =
	     { tmpy__h29017[15:0],
	       tmpy__h29017[31:16] ^ tmpy__h29017[15:0] } ;
  assign wi__h15560 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d242,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d248,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d255,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d261 } ;
  assign wi__h15576 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d274,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d280,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d287,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d293 } ;
  assign wi__h15592 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d307,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d313,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d320,
	       IF_NOT_cc_sipo_validBytes_BIT_4_0_AND_cc_inbuf_ETC___d324 } ;
  assign wi__h15608 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d337,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d343,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d350,
	       IF_NOT_cc_sipo_validBytes_BIT_0_9_0_AND_cc_inb_ETC___d354 } ;
  assign wj__h15561 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d103,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d109,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d116,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d122 } ;
  assign wj__h15577 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d137,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d143,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d150,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d156 } ;
  assign wj__h15593 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d173,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d179,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d186,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d192 } ;
  assign wj__h15609 =
	     { IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d208,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d214,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d221,
	       IF_cc_inbufFlags_5_BIT_4_3_AND_NOT_cc_sipo_val_ETC___d227 } ;
  assign x0__h29012 =
	     { ~x__h30983[31],
	       x__h30983[30],
	       ~x__h30983[29:28],
	       x__h30983[27],
	       ~x__h30983[26:21],
	       x__h30983[20:17],
	       ~x__h30983[16],
	       x__h30983[15],
	       ~x__h30983[14],
	       x__h30983[13],
	       ~x__h30983[12],
	       x__h30983[11:9],
	       ~x__h30983[8],
	       x__h30983[7],
	       ~x__h30983[6:5],
	       x__h30983[4:2],
	       ~x__h30983[1],
	       x__h30983[0] } ;
  assign x__h16381 = cc_sparkleState[127:96] ^ wj__h15561 ;
  assign x__h18050 = cc_sparkleState[95:64] ^ wj__h15577 ;
  assign x__h19350 = cc_sparkleState[63:32] ^ wj__h15593 ;
  assign x__h20650 = cc_sparkleState[31:0] ^ wj__h15609 ;
  assign x__h21963 = cc_sparkleState[255:224] ^ wi__h15560 ;
  assign x__h23220 = cc_sparkleState[223:192] ^ wi__h15576 ;
  assign x__h24477 = cc_sparkleState[191:160] ^ wi__h15592 ;
  assign x__h25734 = cc_sparkleState[159:128] ^ wi__h15608 ;
  assign x__h29686 =
	     { x__h29988[31:30],
	       ~x__h29988[29:27],
	       x__h29988[26:24],
	       ~x__h29988[23],
	       x__h29988[22],
	       ~x__h29988[21:20],
	       x__h29988[19],
	       ~x__h29988[18],
	       x__h29988[17:16],
	       ~x__h29988[15:14],
	       x__h29988[13],
	       ~x__h29988[12:11],
	       x__h29988[10],
	       ~x__h29988[9],
	       x__h29988[8:7],
	       ~x__h29988[6],
	       x__h29988[5],
	       ~x__h29988[4],
	       x__h29988[3],
	       ~x__h29988[2:1],
	       x__h29988[0] } ;
  assign x__h29713 =
	     { x__h29848[31:30],
	       ~x__h29848[29:27],
	       x__h29848[26:24],
	       ~x__h29848[23],
	       x__h29848[22],
	       ~x__h29848[21:20],
	       x__h29848[19],
	       ~x__h29848[18],
	       x__h29848[17:16],
	       ~x__h29848[15:14],
	       x__h29848[13],
	       ~x__h29848[12:11],
	       x__h29848[10],
	       ~x__h29848[9],
	       x__h29848[8:7],
	       ~x__h29848[6],
	       x__h29848[5],
	       ~x__h29848[4],
	       x__h29848[3],
	       ~x__h29848[2:1],
	       x__h29848[0] } ;
  assign x__h29738 =
	     { x__h29803[31:30],
	       ~x__h29803[29:27],
	       x__h29803[26:24],
	       ~x__h29803[23],
	       x__h29803[22],
	       ~x__h29803[21:20],
	       x__h29803[19],
	       ~x__h29803[18],
	       x__h29803[17:16],
	       ~x__h29803[15:14],
	       x__h29803[13],
	       ~x__h29803[12:11],
	       x__h29803[10],
	       ~x__h29803[9],
	       x__h29803[8:7],
	       ~x__h29803[6],
	       x__h29803[5],
	       ~x__h29803[4],
	       x__h29803[3],
	       ~x__h29803[2:1],
	       x__h29803[0] } ;
  assign x__h29803 = cc_sparkleState[159:128] + y__h29823 ;
  assign x__h29848 = x__h29738 + y__h29868 ;
  assign x__h29988 = x__h29713 + y__h29714 ;
  assign x__h30023 = x__h29686 + y__h30043 ;
  assign x__h30183 =
	     { ~x__h30472[31],
	       x__h30472[30],
	       ~x__h30472[29:24],
	       x__h30472[23],
	       ~x__h30472[22:20],
	       x__h30472[19:17],
	       ~x__h30472[16],
	       x__h30472[15],
	       ~x__h30472[14],
	       x__h30472[13],
	       ~x__h30472[12:11],
	       x__h30472[10:8],
	       ~x__h30472[7],
	       x__h30472[6:0] } ;
  assign x__h30210 =
	     { ~x__h30425[31],
	       x__h30425[30],
	       ~x__h30425[29:24],
	       x__h30425[23],
	       ~x__h30425[22:20],
	       x__h30425[19:17],
	       ~x__h30425[16],
	       x__h30425[15],
	       ~x__h30425[14],
	       x__h30425[13],
	       ~x__h30425[12:11],
	       x__h30425[10:8],
	       ~x__h30425[7],
	       x__h30425[6:0] } ;
  assign x__h30235 =
	     { ~x__h30379[31],
	       x__h30379[30],
	       ~x__h30379[29:24],
	       x__h30379[23],
	       ~x__h30379[22:20],
	       x__h30379[19:17],
	       ~x__h30379[16],
	       x__h30379[15],
	       ~x__h30379[14],
	       x__h30379[13],
	       ~x__h30379[12:11],
	       x__h30379[10:8],
	       ~x__h30379[7],
	       x__h30379[6:0] } ;
  assign x__h30379 = cc_sparkleState[95:64] + y__h30399 ;
  assign x__h30425 = x__h30235 + y__h30445 ;
  assign x__h30472 = x__h30210 + y__h30211 ;
  assign x__h30507 = x__h30183 + y__h30527 ;
  assign x__h30664 =
	     { ~x__h30948[31],
	       x__h30948[30],
	       ~x__h30948[29:28],
	       x__h30948[27],
	       ~x__h30948[26:21],
	       x__h30948[20:17],
	       ~x__h30948[16],
	       x__h30948[15],
	       ~x__h30948[14],
	       x__h30948[13],
	       ~x__h30948[12],
	       x__h30948[11:9],
	       ~x__h30948[8],
	       x__h30948[7],
	       ~x__h30948[6:5],
	       x__h30948[4:2],
	       ~x__h30948[1],
	       x__h30948[0] } ;
  assign x__h30691 =
	     { ~x__h30904[31],
	       x__h30904[30],
	       ~x__h30904[29:28],
	       x__h30904[27],
	       ~x__h30904[26:21],
	       x__h30904[20:17],
	       ~x__h30904[16],
	       x__h30904[15],
	       ~x__h30904[14],
	       x__h30904[13],
	       ~x__h30904[12],
	       x__h30904[11:9],
	       ~x__h30904[8],
	       x__h30904[7],
	       ~x__h30904[6:5],
	       x__h30904[4:2],
	       ~x__h30904[1],
	       x__h30904[0] } ;
  assign x__h30716 =
	     { ~x__h30859[31],
	       x__h30859[30],
	       ~x__h30859[29:28],
	       x__h30859[27],
	       ~x__h30859[26:21],
	       x__h30859[20:17],
	       ~x__h30859[16],
	       x__h30859[15],
	       ~x__h30859[14],
	       x__h30859[13],
	       ~x__h30859[12],
	       x__h30859[11:9],
	       ~x__h30859[8],
	       x__h30859[7],
	       ~x__h30859[6:5],
	       x__h30859[4:2],
	       ~x__h30859[1],
	       x__h30859[0] } ;
  assign x__h30859 = cc_sparkleState[31:0] + y__h30879 ;
  assign x__h30904 = x__h30716 + y__h30924 ;
  assign x__h30948 = x__h30691 + y__h30692 ;
  assign x__h30983 = x__h30664 + y__h31003 ;
  assign x__h31120 = x__h31121 ^ y0__h29013 ;
  assign x__h31121 = y__h31152 ^ y__h31168 ;
  assign x__h31151 =
	     { x__h31357[31:30],
	       ~x__h31357[29:28],
	       x__h31357[27:26],
	       ~x__h31357[25],
	       x__h31357[24:23],
	       ~x__h31357[22],
	       x__h31357[21:20],
	       ~x__h31357[19:17],
	       x__h31357[16:15],
	       ~x__h31357[14:12],
	       x__h31357[11],
	       ~x__h31357[10:8],
	       x__h31357[7:6],
	       ~x__h31357[5:3],
	       x__h31357[2:0] } ;
  assign x__h31178 =
	     { x__h31313[31:30],
	       ~x__h31313[29:28],
	       x__h31313[27:26],
	       ~x__h31313[25],
	       x__h31313[24:23],
	       ~x__h31313[22],
	       x__h31313[21:20],
	       ~x__h31313[19:17],
	       x__h31313[16:15],
	       ~x__h31313[14:12],
	       x__h31313[11],
	       ~x__h31313[10:8],
	       x__h31313[7:6],
	       ~x__h31313[5:3],
	       x__h31313[2:0] } ;
  assign x__h31203 =
	     { x__h31268[31:30],
	       ~x__h31268[29:28],
	       x__h31268[27:26],
	       ~x__h31268[25],
	       x__h31268[24:23],
	       ~x__h31268[22],
	       x__h31268[21:20],
	       ~x__h31268[19:17],
	       x__h31268[16:15],
	       ~x__h31268[14:12],
	       x__h31268[11],
	       ~x__h31268[10:8],
	       x__h31268[7:6],
	       ~x__h31268[5:3],
	       x__h31268[2:0] } ;
  assign x__h31268 = cc_sparkleState[223:192] + y__h31288 ;
  assign x__h31313 = x__h31203 + y__h31333 ;
  assign x__h31357 = x__h31178 + y__h31179 ;
  assign x__h31392 = x__h31151 + y__h31412 ;
  assign x__h31494 =
	     x0__h29012 ^
	     { ~x__h30507[31],
	       x__h30507[30],
	       ~x__h30507[29:24],
	       x__h30507[23],
	       ~x__h30507[22:20],
	       x__h30507[19:17],
	       ~x__h30507[16],
	       x__h30507[15],
	       ~x__h30507[14],
	       x__h30507[13],
	       ~x__h30507[12:11],
	       x__h30507[10:8],
	       ~x__h30507[7],
	       x__h30507[6:0] } ;
  assign x__h31609 = x__h31610 ^ x0__h29012 ;
  assign x__h31610 =
	     { x__h31392[31:30],
	       ~x__h31392[29:28],
	       x__h31392[27:26],
	       ~x__h31392[25],
	       x__h31392[24:23],
	       ~x__h31392[22],
	       x__h31392[21:20],
	       ~x__h31392[19:17],
	       x__h31392[16:15],
	       ~x__h31392[14:12],
	       x__h31392[11],
	       ~x__h31392[10:8],
	       x__h31392[7:6],
	       ~x__h31392[5:3],
	       x__h31392[2:0] } ;
  assign x__h31645 =
	     y0__h29013 ^
	     cc_sparkleState_8_BITS_127_TO_100_62_CONCAT_cc_ETC___d679 ;
  assign x__h31762 =
	     x__h31763 ^
	     cc_sparkleState_8_BITS_191_TO_160_69_XOR_cc_sp_ETC___d519 ;
  assign x__h31763 = y__h31799 ^ y__h31815 ;
  assign x__h31798 =
	     { x__h32004[31],
	       ~x__h32004[30],
	       x__h32004[29:28],
	       ~x__h32004[27:24],
	       x__h32004[23],
	       ~x__h32004[22:18],
	       x__h32004[17:15],
	       ~x__h32004[14:11],
	       x__h32004[10],
	       ~x__h32004[9:8],
	       x__h32004[7],
	       ~x__h32004[6],
	       x__h32004[5],
	       ~x__h32004[4],
	       x__h32004[3],
	       ~x__h32004[2:0] } ;
  assign x__h31825 =
	     { x__h31960[31],
	       ~x__h31960[30],
	       x__h31960[29:28],
	       ~x__h31960[27:24],
	       x__h31960[23],
	       ~x__h31960[22:18],
	       x__h31960[17:15],
	       ~x__h31960[14:11],
	       x__h31960[10],
	       ~x__h31960[9:8],
	       x__h31960[7],
	       ~x__h31960[6],
	       x__h31960[5],
	       ~x__h31960[4],
	       x__h31960[3],
	       ~x__h31960[2:0] } ;
  assign x__h31850 =
	     { x__h31915[31],
	       ~x__h31915[30],
	       x__h31915[29:28],
	       ~x__h31915[27:24],
	       x__h31915[23],
	       ~x__h31915[22:18],
	       x__h31915[17:15],
	       ~x__h31915[14:11],
	       x__h31915[10],
	       ~x__h31915[9:8],
	       x__h31915[7],
	       ~x__h31915[6],
	       x__h31915[5],
	       ~x__h31915[4],
	       x__h31915[3],
	       ~x__h31915[2:0] } ;
  assign x__h31915 = cc_sparkleState[351:320] + y__h31935 ;
  assign x__h31960 = x__h31850 + y__h31980 ;
  assign x__h32004 = x__h31825 + y__h31826 ;
  assign x__h32039 = x__h31798 + y__h32059 ;
  assign x__h32134 =
	     x__h32135 ^
	     { x__h30023[31:30],
	       ~x__h30023[29:27],
	       x__h30023[26:24],
	       ~x__h30023[23],
	       x__h30023[22],
	       ~x__h30023[21:20],
	       x__h30023[19],
	       ~x__h30023[18],
	       x__h30023[17:16],
	       ~x__h30023[15:14],
	       x__h30023[13],
	       ~x__h30023[12:11],
	       x__h30023[10],
	       ~x__h30023[9],
	       x__h30023[8:7],
	       ~x__h30023[6],
	       x__h30023[5],
	       ~x__h30023[4],
	       x__h30023[3],
	       ~x__h30023[2:1],
	       x__h30023[0] } ;
  assign x__h32135 =
	     { x__h32039[31],
	       ~x__h32039[30],
	       x__h32039[29:28],
	       ~x__h32039[27:24],
	       x__h32039[23],
	       ~x__h32039[22:18],
	       x__h32039[17:15],
	       ~x__h32039[14:11],
	       x__h32039[10],
	       ~x__h32039[9:8],
	       x__h32039[7],
	       ~x__h32039[6],
	       x__h32039[5],
	       ~x__h32039[4],
	       x__h32039[3],
	       ~x__h32039[2:0] } ;
  assign x__h32217 =
	     x__h32218 ^
	     cc_sparkleState_8_BITS_127_TO_100_62_CONCAT_cc_ETC___d679 ;
  assign x__h32218 = y__h32254 ^ y__h32270 ;
  assign x__h32253 =
	     { ~x__h32459[31],
	       x__h32459[30],
	       ~x__h32459[29:27],
	       x__h32459[26],
	       ~x__h32459[25:24],
	       x__h32459[23:21],
	       ~x__h32459[20],
	       x__h32459[19:17],
	       ~x__h32459[16:15],
	       x__h32459[14:11],
	       ~x__h32459[10],
	       x__h32459[9],
	       ~x__h32459[8:5],
	       x__h32459[4],
	       ~x__h32459[3],
	       x__h32459[2],
	       ~x__h32459[1:0] } ;
  assign x__h32280 =
	     { ~x__h32415[31],
	       x__h32415[30],
	       ~x__h32415[29:27],
	       x__h32415[26],
	       ~x__h32415[25:24],
	       x__h32415[23:21],
	       ~x__h32415[20],
	       x__h32415[19:17],
	       ~x__h32415[16:15],
	       x__h32415[14:11],
	       ~x__h32415[10],
	       x__h32415[9],
	       ~x__h32415[8:5],
	       x__h32415[4],
	       ~x__h32415[3],
	       x__h32415[2],
	       ~x__h32415[1:0] } ;
  assign x__h32305 =
	     { ~x__h32370[31],
	       x__h32370[30],
	       ~x__h32370[29:27],
	       x__h32370[26],
	       ~x__h32370[25:24],
	       x__h32370[23:21],
	       ~x__h32370[20],
	       x__h32370[19:17],
	       ~x__h32370[16:15],
	       x__h32370[14:11],
	       ~x__h32370[10],
	       x__h32370[9],
	       ~x__h32370[8:5],
	       x__h32370[4],
	       ~x__h32370[3],
	       x__h32370[2],
	       ~x__h32370[1:0] } ;
  assign x__h32370 = cc_sparkleState[287:256] + y__h32390 ;
  assign x__h32415 = x__h32305 + y__h32435 ;
  assign x__h32459 = x__h32280 + y__h32281 ;
  assign x__h32494 = x__h32253 + y__h32514 ;
  assign x__h32589 =
	     x__h32590 ^
	     { ~x__h30507[31],
	       x__h30507[30],
	       ~x__h30507[29:24],
	       x__h30507[23],
	       ~x__h30507[22:20],
	       x__h30507[19:17],
	       ~x__h30507[16],
	       x__h30507[15],
	       ~x__h30507[14],
	       x__h30507[13],
	       ~x__h30507[12:11],
	       x__h30507[10:8],
	       ~x__h30507[7],
	       x__h30507[6:0] } ;
  assign x__h32590 =
	     { ~x__h32494[31],
	       x__h32494[30],
	       ~x__h32494[29:27],
	       x__h32494[26],
	       ~x__h32494[25:24],
	       x__h32494[23:21],
	       ~x__h32494[20],
	       x__h32494[19:17],
	       ~x__h32494[16:15],
	       x__h32494[14:11],
	       ~x__h32494[10],
	       x__h32494[9],
	       ~x__h32494[8:5],
	       x__h32494[4],
	       ~x__h32494[3],
	       x__h32494[2],
	       ~x__h32494[1:0] } ;
  assign x__h42606 =
	     { IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[3] ?
		 lwc_pdiReceiver_fifof_D_OUT[7:0] :
		 { IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[2],
		   7'd0 },
	       IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[2] ?
		 lwc_pdiReceiver_fifof_D_OUT[15:8] :
		 { IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[1],
		   7'd0 },
	       IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[1] ?
		 lwc_pdiReceiver_fifof_D_OUT[23:16] :
		 { IF_lwc_pdiCounter_548_BITS_13_TO_1_554_EQ_0_55_ETC___d1578[0],
		   7'd0 },
	       lwc_pdiReceiver_fifof_D_OUT[31:24] } ;
  assign x__h48946 = lwc_outCounter - 14'd1 ;
  assign y0__h29013 = y__h30665 ^ y__h30681 ;
  assign y__h29687 = y__h29714 ^ y__h29730 ;
  assign y__h29703 = { x__h30023[15:0], x__h30023[31:16] } ;
  assign y__h29714 = y__h29739 ^ y__h29755 ;
  assign y__h29730 = { x__h29988[30:0], x__h29988[31] } ;
  assign y__h29739 = cc_sparkleState[191:160] ^ y__h29782 ;
  assign y__h29755 = { x__h29848[16:0], x__h29848[31:17] } ;
  assign y__h29782 = { x__h29803[23:0], x__h29803[31:24] } ;
  assign y__h29823 = { cc_sparkleState[190:160], cc_sparkleState[191] } ;
  assign y__h29868 = { y__h29739[16:0], y__h29739[31:17] } ;
  assign y__h30043 = { y__h29687[23:0], y__h29687[31:24] } ;
  assign y__h30184 = y__h30211 ^ y__h30227 ;
  assign y__h30200 = { x__h30507[15:0], x__h30507[31:16] } ;
  assign y__h30211 = y__h30236 ^ y__h30252 ;
  assign y__h30227 = { x__h30472[30:0], x__h30472[31] } ;
  assign y__h30236 = y__h30263 ^ y__h30279 ;
  assign y__h30252 = { x__h30425[16:0], x__h30425[31:17] } ;
  assign y__h30263 = { cc_sparkleState[127:100], spliced_bits__h30300 } ;
  assign y__h30279 = { x__h30379[23:0], x__h30379[31:24] } ;
  assign y__h30399 = { s_snd__h30419, cc_sparkleState[127] } ;
  assign y__h30445 = { y__h30236[16:0], y__h30236[31:17] } ;
  assign y__h30527 = { y__h30184[23:0], y__h30184[31:24] } ;
  assign y__h30665 = y__h30692 ^ y__h30708 ;
  assign y__h30681 = { x__h30983[15:0], x__h30983[31:16] } ;
  assign y__h30692 = y__h30717 ^ y__h30733 ;
  assign y__h30708 = { x__h30948[30:0], x__h30948[31] } ;
  assign y__h30717 = y__h30744 ^ y__h30760 ;
  assign y__h30733 = { x__h30904[16:0], x__h30904[31:17] } ;
  assign y__h30744 = cc_sparkleState[63:32] ^ y__h30779 ;
  assign y__h30760 = { x__h30859[23:0], x__h30859[31:24] } ;
  assign y__h30879 = { y__h30744[30:0], y__h30744[31] } ;
  assign y__h30924 = { y__h30717[16:0], y__h30717[31:17] } ;
  assign y__h31003 = { y__h30665[23:0], y__h30665[31:24] } ;
  assign y__h31152 = y__h31179 ^ y__h31195 ;
  assign y__h31168 = { x__h31392[15:0], x__h31392[31:16] } ;
  assign y__h31179 = y__h31204 ^ y__h31220 ;
  assign y__h31195 = { x__h31357[30:0], x__h31357[31] } ;
  assign y__h31204 = cc_sparkleState[255:224] ^ y__h31247 ;
  assign y__h31220 = { x__h31313[16:0], x__h31313[31:17] } ;
  assign y__h31247 = { x__h31268[23:0], x__h31268[31:24] } ;
  assign y__h31288 = { cc_sparkleState[254:224], cc_sparkleState[255] } ;
  assign y__h31333 = { y__h31204[16:0], y__h31204[31:17] } ;
  assign y__h31412 = { y__h31152[23:0], y__h31152[31:24] } ;
  assign y__h31799 = y__h31826 ^ y__h31842 ;
  assign y__h31815 = { x__h32039[15:0], x__h32039[31:16] } ;
  assign y__h31826 = y__h31851 ^ y__h31867 ;
  assign y__h31842 = { x__h32004[30:0], x__h32004[31] } ;
  assign y__h31851 = cc_sparkleState[383:352] ^ y__h31894 ;
  assign y__h31867 = { x__h31960[16:0], x__h31960[31:17] } ;
  assign y__h31894 = { x__h31915[23:0], x__h31915[31:24] } ;
  assign y__h31935 = { cc_sparkleState[382:352], cc_sparkleState[383] } ;
  assign y__h31980 = { y__h31851[16:0], y__h31851[31:17] } ;
  assign y__h32059 = { y__h31799[23:0], y__h31799[31:24] } ;
  assign y__h32254 = y__h32281 ^ y__h32297 ;
  assign y__h32270 = { x__h32494[15:0], x__h32494[31:16] } ;
  assign y__h32281 = y__h32306 ^ y__h32322 ;
  assign y__h32297 = { x__h32459[30:0], x__h32459[31] } ;
  assign y__h32306 = cc_sparkleState[319:288] ^ y__h32349 ;
  assign y__h32322 = { x__h32415[16:0], x__h32415[31:17] } ;
  assign y__h32349 = { x__h32370[23:0], x__h32370[31:24] } ;
  assign y__h32390 = { cc_sparkleState[318:288], cc_sparkleState[319] } ;
  assign y__h32435 = { y__h32306[16:0], y__h32306[31:17] } ;
  assign y__h32514 = { y__h32254[23:0], y__h32254[31:24] } ;
  assign z__h15562 =
	     x__h21963 ^
	     IF_cc_sipo_lastBlock_7_THEN_cc_sparkleState_8__ETC___d90 ;
  assign z__h15578 = x__h23220 ^ cc_sparkleState[351:320] ;
  assign z__h15594 = x__h24477 ^ cc_sparkleState[319:288] ;
  assign z__h15610 = x__h25734 ^ cc_sparkleState[287:256] ;
  always@(cc_step)
  begin
    case (cc_step[2:0])
      3'd0: y__h30779 = 32'hB7E15162;
      3'd1: y__h30779 = 32'hBF715880;
      3'd2: y__h30779 = 32'h38B4DA56;
      3'd3: y__h30779 = 32'h324E7738;
      3'd4: y__h30779 = 32'hBB1185EB;
      3'd5: y__h30779 = 32'h4F7C7B57;
      3'd6: y__h30779 = 32'hCFBFA1C8;
      3'd7: y__h30779 = 32'hC2B3293D;
    endcase
  end
  always@(lwc_finalRemainBytes)
  begin
    case (lwc_finalRemainBytes)
      2'd0: CASE_lwc_finalRemainBytes_0_0b1111_1_0b1_2_0b1_ETC__q1 = 4'b1111;
      2'd1: CASE_lwc_finalRemainBytes_0_0b1111_1_0b1_2_0b1_ETC__q1 = 4'b0001;
      2'd2: CASE_lwc_finalRemainBytes_0_0b1111_1_0b1_2_0b1_ETC__q1 = 4'b0011;
      2'd3: CASE_lwc_finalRemainBytes_0_0b1111_1_0b1_2_0b1_ETC__q1 = 4'b0111;
    endcase
  end
  // handling of inlined registers 
  always@(posedge clk)
  begin
    if (rst == 1'b1)
      begin
        cc_inState <=  2'd0;
	cc_opState <=  2'd0;
	cc_piso_validsVec <=  32'd0;
	cc_sipo_lastBlock <=  1'd0;
	cc_sipo_validBytes <=  32'd0;
	cc_sipo_zFill <=  1'd0;
	lwc_doSender_fifof_cntr_r <=  2'd0;
	lwc_doSender_fifof_q_0 <= 
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */   };
	lwc_doSender_fifof_q_1 <= 
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */   };
	lwc_headersFifo_rv <= 
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */   };
	lwc_outState <=  2'd0;
	lwc_pdiState <=  3'd0;
	lwc_sdiState <=  2'd0;
	lwc_tagFifo_rv <= 
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */   };
      end
    else
      begin
        if (cc_inState_EN)
	  cc_inState <=  cc_inState_D_IN;
	if (cc_opState_EN)
	  cc_opState <=  cc_opState_D_IN;
	if (cc_piso_validsVec_EN)
	  cc_piso_validsVec <=  cc_piso_validsVec_D_IN;
	if (cc_sipo_lastBlock_EN)
	  cc_sipo_lastBlock <=  cc_sipo_lastBlock_D_IN;
	if (cc_sipo_validBytes_EN)
	  cc_sipo_validBytes <=  cc_sipo_validBytes_D_IN;
	if (cc_sipo_zFill_EN)
	  cc_sipo_zFill <=  cc_sipo_zFill_D_IN;
	if (lwc_doSender_fifof_cntr_r_EN)
	  lwc_doSender_fifof_cntr_r <= 
	      lwc_doSender_fifof_cntr_r_D_IN;
	if (lwc_doSender_fifof_q_0_EN)
	  lwc_doSender_fifof_q_0 <= 
	      lwc_doSender_fifof_q_0_D_IN;
	if (lwc_doSender_fifof_q_1_EN)
	  lwc_doSender_fifof_q_1 <= 
	      lwc_doSender_fifof_q_1_D_IN;
	if (lwc_headersFifo_rv_EN)
	  lwc_headersFifo_rv <=  lwc_headersFifo_rv_D_IN;
	if (lwc_outState_EN)
	  lwc_outState <=  lwc_outState_D_IN;
	if (lwc_pdiState_EN)
	  lwc_pdiState <=  lwc_pdiState_D_IN;
	if (lwc_sdiState_EN)
	  lwc_sdiState <=  lwc_sdiState_D_IN;
	if (lwc_tagFifo_rv_EN)
	  lwc_tagFifo_rv <=  lwc_tagFifo_rv_D_IN;
      end
    if (cc_eoi_EN) cc_eoi <=  cc_eoi_D_IN;
    if (cc_inbufFlags_EN)
      cc_inbufFlags <=  cc_inbufFlags_D_IN;
    if (cc_incomplete_EN)
      cc_incomplete <=  cc_incomplete_D_IN;
    if (cc_keyBuf_EN) cc_keyBuf <=  cc_keyBuf_D_IN;
    if (cc_piso_blockVec_EN)
      cc_piso_blockVec <=  cc_piso_blockVec_D_IN;
    if (cc_sipo_block_EN)
      cc_sipo_block <=  cc_sipo_block_D_IN;
    if (cc_slimPerm_EN) cc_slimPerm <=  cc_slimPerm_D_IN;
    if (cc_sparkleState_EN)
      cc_sparkleState <=  cc_sparkleState_D_IN;
    if (cc_step_EN) cc_step <=  cc_step_D_IN;
    if (lwc_finalRemainBytes_EN)
      lwc_finalRemainBytes <=  lwc_finalRemainBytes_D_IN;
    if (lwc_inSegEoT_EN)
      lwc_inSegEoT <=  lwc_inSegEoT_D_IN;
    if (lwc_inSegFlags_EN)
      lwc_inSegFlags <=  lwc_inSegFlags_D_IN;
    if (lwc_inSegLast_EN)
      lwc_inSegLast <=  lwc_inSegLast_D_IN;
    if (lwc_newKey_EN) lwc_newKey <=  lwc_newKey_D_IN;
    if (lwc_outCounter_EN)
      lwc_outCounter <=  lwc_outCounter_D_IN;
    if (lwc_outRemainder_EN)
      lwc_outRemainder <=  lwc_outRemainder_D_IN;
    if (lwc_outSegLast_EN)
      lwc_outSegLast <=  lwc_outSegLast_D_IN;
    if (lwc_outSegPt_EN)
      lwc_outSegPt <=  lwc_outSegPt_D_IN;
    if (lwc_pdiCounter_EN)
      lwc_pdiCounter <=  lwc_pdiCounter_D_IN;
    if (lwc_sdiCounter_EN)
      lwc_sdiCounter <=  lwc_sdiCounter_D_IN;
    if (lwc_statFailure_EN)
      lwc_statFailure <=  lwc_statFailure_D_IN;
  end
  // synopsys translate_off 
   // BSV_NO_INITIAL_BLOCKS 
  // synopsys translate_on 
endmodule  // lwc 
// Depth 1 FIFO 
// Allows simultaneous ENQ and DEQ (at the expense of potentially 
// causing combinational loops). 
module FIFOL1(CLK,
              RST,
              D_IN,
              ENQ,
              FULL_N,
              D_OUT,
              DEQ,
              EMPTY_N,
              CLR);
   parameter             width = 1;
   input                 CLK;
   input                 RST;
   input [width - 1 : 0] D_IN;
   input                 ENQ;
   input                 DEQ;
   input                 CLR ;
   output                FULL_N;
   output                 EMPTY_N;
   output [width - 1 : 0] D_OUT;
   reg                    empty_reg ;
   reg [width - 1 : 0]    D_OUT;
 // BSV_NO_INITIAL_BLOCKS 
   assign FULL_N = !empty_reg || DEQ;
   assign EMPTY_N = empty_reg ;
   always@(posedge CLK )
     begin
        if (RST == 1'b1)
           begin
             empty_reg <=  1'b0;
           end
        else
           begin
              if (CLR)
                begin
                   empty_reg <=  1'b0;
                end
              else if (ENQ)
                begin
                   empty_reg <=  1'b1;
                end
              else if (DEQ)
                begin
                   empty_reg <=  1'b0;
                end // if (DEQ) 
           end // else: !if(RST == `BSV_RESET_VALUE) 
     end // always@ (posedge CLK or `BSV_RESET_EDGE RST) 
   always@(posedge CLK )
     begin
          begin
              if (ENQ)
                D_OUT     <=  D_IN;
           end // else: !if(RST == `BSV_RESET_VALUE) 
     end // always@ (posedge CLK or `BSV_RESET_EDGE RST) 
   // synopsys translate_off 
   always@(posedge CLK)
     begin: error_checks
        reg deqerror, enqerror ;
        deqerror =  0;
        enqerror = 0;
        if ( ! empty_reg && DEQ )
          begin
             deqerror = 1 ;
             $display( "Warning: FIFOL1: %m -- Dequeuing from empty fifo" ) ;
          end
        if ( ! FULL_N && ENQ && ! DEQ)
          begin
             enqerror =  1 ;
             $display( "Warning: FIFOL1: %m -- Enqueuing to a full fifo" ) ;
          end
     end
   // synopsys translate_on 
endmodule
